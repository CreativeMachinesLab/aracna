
aracna.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000036  00800100  000010da  0000116e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000010da  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000000af  00800136  00800136  000011a4  2**0
                  ALLOC
  3 .debug_aranges 00000060  00000000  00000000  000011a4  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 0000022d  00000000  00000000  00001204  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000990  00000000  00000000  00001431  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000043c  00000000  00000000  00001dc1  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000081b  00000000  00000000  000021fd  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000140  00000000  00000000  00002a18  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000002c8  00000000  00000000  00002b58  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000004e3  00000000  00000000  00002e20  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000078  00000000  00000000  00003303  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__ctors_end>
       4:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
       8:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
       c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      10:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      14:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      18:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      1c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      20:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      24:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      28:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      2c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      30:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      34:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      38:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      3c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      40:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      44:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      48:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      4c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      50:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      54:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      58:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      5c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      60:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      64:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      68:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      6c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      70:	0c 94 ae 00 	jmp	0x15c	; 0x15c <__vector_28>
      74:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      78:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>

0000007c <__ctors_end>:
      7c:	11 24       	eor	r1, r1
      7e:	1f be       	out	0x3f, r1	; 63
      80:	cf ef       	ldi	r28, 0xFF	; 255
      82:	d0 e1       	ldi	r29, 0x10	; 16
      84:	de bf       	out	0x3e, r29	; 62
      86:	cd bf       	out	0x3d, r28	; 61

00000088 <__do_copy_data>:
      88:	11 e0       	ldi	r17, 0x01	; 1
      8a:	a0 e0       	ldi	r26, 0x00	; 0
      8c:	b1 e0       	ldi	r27, 0x01	; 1
      8e:	ea ed       	ldi	r30, 0xDA	; 218
      90:	f0 e1       	ldi	r31, 0x10	; 16
      92:	02 c0       	rjmp	.+4      	; 0x98 <.do_copy_data_start>

00000094 <.do_copy_data_loop>:
      94:	05 90       	lpm	r0, Z+
      96:	0d 92       	st	X+, r0

00000098 <.do_copy_data_start>:
      98:	a6 33       	cpi	r26, 0x36	; 54
      9a:	b1 07       	cpc	r27, r17
      9c:	d9 f7       	brne	.-10     	; 0x94 <.do_copy_data_loop>

0000009e <__do_clear_bss>:
      9e:	11 e0       	ldi	r17, 0x01	; 1
      a0:	a6 e3       	ldi	r26, 0x36	; 54
      a2:	b1 e0       	ldi	r27, 0x01	; 1
      a4:	01 c0       	rjmp	.+2      	; 0xa8 <.do_clear_bss_start>

000000a6 <.do_clear_bss_loop>:
      a6:	1d 92       	st	X+, r1

000000a8 <.do_clear_bss_start>:
      a8:	a5 3e       	cpi	r26, 0xE5	; 229
      aa:	b1 07       	cpc	r27, r17
      ac:	e1 f7       	brne	.-8      	; 0xa6 <.do_clear_bss_loop>
      ae:	0e 94 28 03 	call	0x650	; 0x650 <main>
      b2:	0c 94 6b 08 	jmp	0x10d6	; 0x10d6 <_exit>

000000b6 <__bad_interrupt>:
      b6:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000ba <setTX>:
unsigned char dynamixel_bus_config[AX12_MAX_SERVOS];
#endif

/** helper functions to switch direction of comms */
void setTX(int id){
    bitClear(UCSR1B, RXEN1); 
      ba:	e9 ec       	ldi	r30, 0xC9	; 201
      bc:	f0 e0       	ldi	r31, 0x00	; 0
      be:	80 81       	ld	r24, Z
      c0:	8f 7e       	andi	r24, 0xEF	; 239
      c2:	80 83       	st	Z, r24
  #else
    // emulate half-duplex on ArbotiX, ArbotiX w/ RX Bridge
    #ifdef ARBOTIX_WITH_RX
      PORTD |= 0x10;
    #endif   
    bitSet(UCSR1B, TXEN1);
      c4:	80 81       	ld	r24, Z
      c6:	88 60       	ori	r24, 0x08	; 8
      c8:	80 83       	st	Z, r24
    bitClear(UCSR1B, RXCIE1);
      ca:	80 81       	ld	r24, Z
      cc:	8f 77       	andi	r24, 0x7F	; 127
      ce:	80 83       	st	Z, r24
  #endif
    ax_tx_Pointer = 0;
      d0:	10 92 7f 01 	sts	0x017F, r1
      d4:	10 92 7e 01 	sts	0x017E, r1
}
      d8:	08 95       	ret

000000da <setRX>:
      while (bit_is_clear(UCSR1A, UDRE1));
      for(i=0; i<25; i++)    
          asm("nop");
      PORTD &= 0xEF;
    #endif 
    bitClear(UCSR1B, TXEN1);
      da:	e9 ec       	ldi	r30, 0xC9	; 201
      dc:	f0 e0       	ldi	r31, 0x00	; 0
      de:	80 81       	ld	r24, Z
      e0:	87 7f       	andi	r24, 0xF7	; 247
      e2:	80 83       	st	Z, r24
    bitSet(UCSR1B, RXCIE1);
      e4:	80 81       	ld	r24, Z
      e6:	80 68       	ori	r24, 0x80	; 128
      e8:	80 83       	st	Z, r24
  #endif  
    bitSet(UCSR1B, RXEN1);
      ea:	80 81       	ld	r24, Z
      ec:	80 61       	ori	r24, 0x10	; 16
      ee:	80 83       	st	Z, r24
    ax_rx_int_Pointer = 0;
      f0:	10 92 a1 01 	sts	0x01A1, r1
      f4:	10 92 a0 01 	sts	0x01A0, r1
    ax_rx_Pointer = 0;
      f8:	10 92 7b 01 	sts	0x017B, r1
      fc:	10 92 7a 01 	sts	0x017A, r1
}
     100:	08 95       	ret

00000102 <setTXall>:
// for sync write
void setTXall(){
    bitClear(UCSR1B, RXEN1);    
     102:	e9 ec       	ldi	r30, 0xC9	; 201
     104:	f0 e0       	ldi	r31, 0x00	; 0
     106:	80 81       	ld	r24, Z
     108:	8f 7e       	andi	r24, 0xEF	; 239
     10a:	80 83       	st	Z, r24
    SET_AX_WR;   
  #else
    #ifdef ARBOTIX_WITH_RX
      PORTD |= 0x10;
    #endif
    bitSet(UCSR1B, TXEN1);
     10c:	80 81       	ld	r24, Z
     10e:	88 60       	ori	r24, 0x08	; 8
     110:	80 83       	st	Z, r24
    bitClear(UCSR1B, RXCIE1);
     112:	80 81       	ld	r24, Z
     114:	8f 77       	andi	r24, 0x7F	; 127
     116:	80 83       	st	Z, r24
  #endif
    ax_tx_Pointer = 0;
     118:	10 92 7f 01 	sts	0x017F, r1
     11c:	10 92 7e 01 	sts	0x017E, r1
}
     120:	08 95       	ret

00000122 <ax12write>:

/** Sends a character out the serial port. */
void ax12write(unsigned char data){
     122:	98 2f       	mov	r25, r24
    while (bit_is_clear(UCSR1A, UDRE1));
     124:	80 91 c8 00 	lds	r24, 0x00C8
     128:	85 ff       	sbrs	r24, 5
     12a:	fc cf       	rjmp	.-8      	; 0x124 <ax12write+0x2>
    UDR1 = data;
     12c:	90 93 ce 00 	sts	0x00CE, r25
}
     130:	08 95       	ret

00000132 <ax12writeB>:
/** Sends a character out the serial port, and puts it in the tx_buffer */
void ax12writeB(unsigned char data){
     132:	28 2f       	mov	r18, r24
    ax_tx_buffer[(ax_tx_Pointer++)] = data; 
     134:	80 91 7e 01 	lds	r24, 0x017E
     138:	90 91 7f 01 	lds	r25, 0x017F
     13c:	fc 01       	movw	r30, r24
     13e:	e6 5c       	subi	r30, 0xC6	; 198
     140:	fe 4f       	sbci	r31, 0xFE	; 254
     142:	20 83       	st	Z, r18
     144:	01 96       	adiw	r24, 0x01	; 1
     146:	90 93 7f 01 	sts	0x017F, r25
     14a:	80 93 7e 01 	sts	0x017E, r24
    while (bit_is_clear(UCSR1A, UDRE1));
     14e:	80 91 c8 00 	lds	r24, 0x00C8
     152:	85 ff       	sbrs	r24, 5
     154:	fc cf       	rjmp	.-8      	; 0x14e <ax12writeB+0x1c>
    UDR1 = data;
     156:	20 93 ce 00 	sts	0x00CE, r18
}
     15a:	08 95       	ret

0000015c <__vector_28>:
/** We have a one-way receive buffer, which is reset after each packet is received.
    A wrap-around buffer does not appear to be fast enough to catch all bytes at 1Mbps. */
ISR(USART1_RX_vect){
     15c:	1f 92       	push	r1
     15e:	0f 92       	push	r0
     160:	0f b6       	in	r0, 0x3f	; 63
     162:	0f 92       	push	r0
     164:	11 24       	eor	r1, r1
     166:	2f 93       	push	r18
     168:	8f 93       	push	r24
     16a:	9f 93       	push	r25
     16c:	ef 93       	push	r30
     16e:	ff 93       	push	r31
	
    ax_rx_int_buffer[(ax_rx_int_Pointer++)] = UDR1;
     170:	80 91 a0 01 	lds	r24, 0x01A0
     174:	90 91 a1 01 	lds	r25, 0x01A1
     178:	20 91 ce 00 	lds	r18, 0x00CE
     17c:	fc 01       	movw	r30, r24
     17e:	e6 5a       	subi	r30, 0xA6	; 166
     180:	fe 4f       	sbci	r31, 0xFE	; 254
     182:	20 83       	st	Z, r18
     184:	01 96       	adiw	r24, 0x01	; 1
     186:	90 93 a1 01 	sts	0x01A1, r25
     18a:	80 93 a0 01 	sts	0x01A0, r24
	//fprintf(stdout, "0x%X,", ax_rx_int_buffer[(ax_rx_int_Pointer)]);
}
     18e:	ff 91       	pop	r31
     190:	ef 91       	pop	r30
     192:	9f 91       	pop	r25
     194:	8f 91       	pop	r24
     196:	2f 91       	pop	r18
     198:	0f 90       	pop	r0
     19a:	0f be       	out	0x3f, r0	; 63
     19c:	0f 90       	pop	r0
     19e:	1f 90       	pop	r1
     1a0:	18 95       	reti

000001a2 <ax12ReadPacket>:

/** read back the error code for our latest packet read */
int ax12Error;
/** > 0 = success */
int ax12ReadPacket(int length){
     1a2:	0f 93       	push	r16
     1a4:	1f 93       	push	r17
     1a6:	df 93       	push	r29
     1a8:	cf 93       	push	r28
     1aa:	0f 92       	push	r0
     1ac:	cd b7       	in	r28, 0x3d	; 61
     1ae:	de b7       	in	r29, 0x3e	; 62
     1b0:	8c 01       	movw	r16, r24
    unsigned char offset, blength, checksum, timeout;
    unsigned char volatile bcount; 

    offset = 0;
    timeout = 0;
    bcount = 0;
     1b2:	19 82       	std	Y+1, r1	; 0x01
     1b4:	60 e0       	ldi	r22, 0x00	; 0
     1b6:	1b c0       	rjmp	.+54     	; 0x1ee <ax12ReadPacket+0x4c>
    while(bcount < length){
     1b8:	4f 5f       	subi	r20, 0xFF	; 255
     1ba:	5f 4f       	sbci	r21, 0xFF	; 255
        ulCounter = 0;
        while((bcount + offset) == ax_rx_int_Pointer){
            if(ulCounter++ > 1000L){ // was 3000
     1bc:	83 e0       	ldi	r24, 0x03	; 3
     1be:	4a 3e       	cpi	r20, 0xEA	; 234
     1c0:	58 07       	cpc	r21, r24
     1c2:	f9 f0       	breq	.+62     	; 0x202 <ax12ReadPacket+0x60>
    offset = 0;
    timeout = 0;
    bcount = 0;
    while(bcount < length){
        ulCounter = 0;
        while((bcount + offset) == ax_rx_int_Pointer){
     1c4:	89 81       	ldd	r24, Y+1	; 0x01
     1c6:	20 91 a0 01 	lds	r18, 0x01A0
     1ca:	30 91 a1 01 	lds	r19, 0x01A1
     1ce:	fd 01       	movw	r30, r26
     1d0:	e8 0f       	add	r30, r24
     1d2:	f1 1d       	adc	r31, r1
     1d4:	e2 17       	cp	r30, r18
     1d6:	f3 07       	cpc	r31, r19
     1d8:	79 f3       	breq	.-34     	; 0x1b8 <ax12ReadPacket+0x16>
     1da:	31 c0       	rjmp	.+98     	; 0x23e <ax12ReadPacket+0x9c>
                break;
            }
        }
        if(timeout) break;
        ax_rx_buffer[bcount] = ax_rx_int_buffer[bcount + offset];
        if((bcount == 0) && (ax_rx_buffer[0] != 0xff))
     1dc:	80 91 80 01 	lds	r24, 0x0180
     1e0:	8f 3f       	cpi	r24, 0xFF	; 255
     1e2:	11 f0       	breq	.+4      	; 0x1e8 <ax12ReadPacket+0x46>
            offset++;
     1e4:	6f 5f       	subi	r22, 0xFF	; 255
     1e6:	03 c0       	rjmp	.+6      	; 0x1ee <ax12ReadPacket+0x4c>
        else
            bcount++;
     1e8:	89 81       	ldd	r24, Y+1	; 0x01
     1ea:	8f 5f       	subi	r24, 0xFF	; 255
     1ec:	89 83       	std	Y+1, r24	; 0x01
    unsigned char volatile bcount; 

    offset = 0;
    timeout = 0;
    bcount = 0;
    while(bcount < length){
     1ee:	89 81       	ldd	r24, Y+1	; 0x01
     1f0:	90 e0       	ldi	r25, 0x00	; 0
     1f2:	80 17       	cp	r24, r16
     1f4:	91 07       	cpc	r25, r17
     1f6:	2c f4       	brge	.+10     	; 0x202 <ax12ReadPacket+0x60>
     1f8:	40 e0       	ldi	r20, 0x00	; 0
     1fa:	50 e0       	ldi	r21, 0x00	; 0
        ulCounter = 0;
        while((bcount + offset) == ax_rx_int_Pointer){
     1fc:	a6 2f       	mov	r26, r22
     1fe:	b0 e0       	ldi	r27, 0x00	; 0
     200:	e1 cf       	rjmp	.-62     	; 0x1c4 <ax12ReadPacket+0x22>
            offset++;
        else
            bcount++;
    }

    blength = bcount;
     202:	89 81       	ldd	r24, Y+1	; 0x01
     204:	22 e0       	ldi	r18, 0x02	; 2
     206:	90 e0       	ldi	r25, 0x00	; 0
     208:	07 c0       	rjmp	.+14     	; 0x218 <ax12ReadPacket+0x76>
    checksum = 0;
    for(offset=2;offset<bcount;offset++)
        checksum += ax_rx_buffer[offset];
     20a:	e2 2f       	mov	r30, r18
     20c:	f0 e0       	ldi	r31, 0x00	; 0
     20e:	e0 58       	subi	r30, 0x80	; 128
     210:	fe 4f       	sbci	r31, 0xFE	; 254
     212:	80 81       	ld	r24, Z
     214:	98 0f       	add	r25, r24
            bcount++;
    }

    blength = bcount;
    checksum = 0;
    for(offset=2;offset<bcount;offset++)
     216:	2f 5f       	subi	r18, 0xFF	; 255
     218:	89 81       	ldd	r24, Y+1	; 0x01
     21a:	28 17       	cp	r18, r24
     21c:	b0 f3       	brcs	.-20     	; 0x20a <ax12ReadPacket+0x68>
     21e:	20 e0       	ldi	r18, 0x00	; 0
     220:	30 e0       	ldi	r19, 0x00	; 0
     222:	89 2f       	mov	r24, r25
     224:	90 e0       	ldi	r25, 0x00	; 0
     226:	8f 3f       	cpi	r24, 0xFF	; 255
     228:	91 05       	cpc	r25, r1
     22a:	11 f4       	brne	.+4      	; 0x230 <ax12ReadPacket+0x8e>
     22c:	21 e0       	ldi	r18, 0x01	; 1
     22e:	30 e0       	ldi	r19, 0x00	; 0
    if((checksum%256) != 255){
        return 0;
    }else{
        return 1;
    }
}
     230:	c9 01       	movw	r24, r18
     232:	0f 90       	pop	r0
     234:	cf 91       	pop	r28
     236:	df 91       	pop	r29
     238:	1f 91       	pop	r17
     23a:	0f 91       	pop	r16
     23c:	08 95       	ret
                timeout = 1;
                break;
            }
        }
        if(timeout) break;
        ax_rx_buffer[bcount] = ax_rx_int_buffer[bcount + offset];
     23e:	e9 81       	ldd	r30, Y+1	; 0x01
     240:	89 81       	ldd	r24, Y+1	; 0x01
     242:	f0 e0       	ldi	r31, 0x00	; 0
     244:	e0 58       	subi	r30, 0x80	; 128
     246:	fe 4f       	sbci	r31, 0xFE	; 254
     248:	a6 5a       	subi	r26, 0xA6	; 166
     24a:	be 4f       	sbci	r27, 0xFE	; 254
     24c:	a8 0f       	add	r26, r24
     24e:	b1 1d       	adc	r27, r1
     250:	8c 91       	ld	r24, X
     252:	80 83       	st	Z, r24
        if((bcount == 0) && (ax_rx_buffer[0] != 0xff))
     254:	89 81       	ldd	r24, Y+1	; 0x01
     256:	88 23       	and	r24, r24
     258:	39 f6       	brne	.-114    	; 0x1e8 <ax12ReadPacket+0x46>
     25a:	c0 cf       	rjmp	.-128    	; 0x1dc <ax12ReadPacket+0x3a>

0000025c <ax12Init>:
        return 1;
    }
}

/** initializes serial1 transmit at baud, 8-N-1 */
void ax12Init(long baud){
     25c:	9b 01       	movw	r18, r22
     25e:	ac 01       	movw	r20, r24
    UBRR1H = (F_CPU / (8 * baud) - 1 ) >> 8;
     260:	63 e0       	ldi	r22, 0x03	; 3
     262:	22 0f       	add	r18, r18
     264:	33 1f       	adc	r19, r19
     266:	44 1f       	adc	r20, r20
     268:	55 1f       	adc	r21, r21
     26a:	6a 95       	dec	r22
     26c:	d1 f7       	brne	.-12     	; 0x262 <ax12Init+0x6>
     26e:	60 e0       	ldi	r22, 0x00	; 0
     270:	74 e2       	ldi	r23, 0x24	; 36
     272:	84 ef       	ldi	r24, 0xF4	; 244
     274:	90 e0       	ldi	r25, 0x00	; 0
     276:	0e 94 d5 04 	call	0x9aa	; 0x9aa <__udivmodsi4>
     27a:	c9 01       	movw	r24, r18
     27c:	da 01       	movw	r26, r20
     27e:	01 97       	sbiw	r24, 0x01	; 1
     280:	a1 09       	sbc	r26, r1
     282:	b1 09       	sbc	r27, r1
     284:	29 2f       	mov	r18, r25
     286:	3a 2f       	mov	r19, r26
     288:	4b 2f       	mov	r20, r27
     28a:	55 27       	eor	r21, r21
     28c:	01 96       	adiw	r24, 0x01	; 1
     28e:	a1 1d       	adc	r26, r1
     290:	b1 1d       	adc	r27, r1
     292:	20 93 cd 00 	sts	0x00CD, r18
    UBRR1L = (F_CPU / (8 * baud) - 1 );
     296:	81 50       	subi	r24, 0x01	; 1
     298:	80 93 cc 00 	sts	0x00CC, r24
    bitSet(UCSR1A, U2X1);
     29c:	e8 ec       	ldi	r30, 0xC8	; 200
     29e:	f0 e0       	ldi	r31, 0x00	; 0
     2a0:	80 81       	ld	r24, Z
     2a2:	82 60       	ori	r24, 0x02	; 2
     2a4:	80 83       	st	Z, r24
    ax_rx_int_Pointer = 0;
     2a6:	10 92 a1 01 	sts	0x01A1, r1
     2aa:	10 92 a0 01 	sts	0x01A0, r1
    ax_rx_Pointer = 0;
     2ae:	10 92 7b 01 	sts	0x017B, r1
     2b2:	10 92 7a 01 	sts	0x017A, r1
    ax_tx_Pointer = 0;
     2b6:	10 92 7f 01 	sts	0x017F, r1
     2ba:	10 92 7e 01 	sts	0x017E, r1
  #ifdef ARBOTIX_WITH_RX
    DDRD |= 0x10;   // Servo B = output
    PORTD &= 0xEF;  // Servo B low
  #endif
    // enable rx
    setRX(0);
     2be:	80 e0       	ldi	r24, 0x00	; 0
     2c0:	90 e0       	ldi	r25, 0x00	; 0
     2c2:	0e 94 6d 00 	call	0xda	; 0xda <setRX>
	sei();  
     2c6:	78 94       	sei
#endif
}
     2c8:	08 95       	ret

000002ca <ax12GetRegister>:
/******************************************************************************
 * Packet Level
 */

/** Read register value(s) */
int ax12GetRegister(int id, int regstart, int length){  
     2ca:	ef 92       	push	r14
     2cc:	ff 92       	push	r15
     2ce:	0f 93       	push	r16
     2d0:	1f 93       	push	r17
     2d2:	cf 93       	push	r28
     2d4:	df 93       	push	r29
     2d6:	8c 01       	movw	r16, r24
     2d8:	7b 01       	movw	r14, r22
     2da:	ea 01       	movw	r28, r20
    setTX(id);
     2dc:	0e 94 5d 00 	call	0xba	; 0xba <setTX>
    // 0xFF 0xFF ID LENGTH INSTRUCTION PARAM... CHECKSUM    
    int checksum = ~((id + 6 + regstart + length)%256);
    ax12writeB(0xFF);
     2e0:	8f ef       	ldi	r24, 0xFF	; 255
     2e2:	0e 94 99 00 	call	0x132	; 0x132 <ax12writeB>
    ax12writeB(0xFF);
     2e6:	8f ef       	ldi	r24, 0xFF	; 255
     2e8:	0e 94 99 00 	call	0x132	; 0x132 <ax12writeB>
    ax12writeB(id);
     2ec:	80 2f       	mov	r24, r16
     2ee:	0e 94 99 00 	call	0x132	; 0x132 <ax12writeB>
    ax12writeB(4);    // length
     2f2:	84 e0       	ldi	r24, 0x04	; 4
     2f4:	0e 94 99 00 	call	0x132	; 0x132 <ax12writeB>
    ax12writeB(AX_READ_DATA);
     2f8:	82 e0       	ldi	r24, 0x02	; 2
     2fa:	0e 94 99 00 	call	0x132	; 0x132 <ax12writeB>
    ax12writeB(regstart);
     2fe:	8e 2d       	mov	r24, r14
     300:	0e 94 99 00 	call	0x132	; 0x132 <ax12writeB>
    ax12writeB(length);
     304:	8c 2f       	mov	r24, r28
     306:	0e 94 99 00 	call	0x132	; 0x132 <ax12writeB>
    ax12writeB(checksum);  
     30a:	c8 01       	movw	r24, r16
     30c:	06 96       	adiw	r24, 0x06	; 6
     30e:	8e 0d       	add	r24, r14
     310:	9f 1d       	adc	r25, r15
     312:	8c 0f       	add	r24, r28
     314:	9d 1f       	adc	r25, r29
     316:	60 e0       	ldi	r22, 0x00	; 0
     318:	71 e0       	ldi	r23, 0x01	; 1
     31a:	0e 94 c2 04 	call	0x984	; 0x984 <__divmodhi4>
     31e:	80 95       	com	r24
     320:	0e 94 99 00 	call	0x132	; 0x132 <ax12writeB>
    setRX(id);    
     324:	c8 01       	movw	r24, r16
     326:	0e 94 6d 00 	call	0xda	; 0xda <setRX>
    if(ax12ReadPacket(length + 6) > 0){
     32a:	ce 01       	movw	r24, r28
     32c:	06 96       	adiw	r24, 0x06	; 6
     32e:	0e 94 d1 00 	call	0x1a2	; 0x1a2 <ax12ReadPacket>
     332:	18 16       	cp	r1, r24
     334:	19 06       	cpc	r1, r25
     336:	1c f0       	brlt	.+6      	; 0x33e <ax12GetRegister+0x74>
     338:	2f ef       	ldi	r18, 0xFF	; 255
     33a:	3f ef       	ldi	r19, 0xFF	; 255
     33c:	16 c0       	rjmp	.+44     	; 0x36a <ax12GetRegister+0xa0>
        ax12Error = ax_rx_buffer[4];
     33e:	80 91 84 01 	lds	r24, 0x0184
     342:	80 93 7c 01 	sts	0x017C, r24
     346:	10 92 7d 01 	sts	0x017D, r1
        if(length == 1)
     34a:	21 97       	sbiw	r28, 0x01	; 1
     34c:	29 f4       	brne	.+10     	; 0x358 <ax12GetRegister+0x8e>
            return ax_rx_buffer[5];
     34e:	80 91 85 01 	lds	r24, 0x0185
     352:	28 2f       	mov	r18, r24
     354:	30 e0       	ldi	r19, 0x00	; 0
     356:	09 c0       	rjmp	.+18     	; 0x36a <ax12GetRegister+0xa0>
        else
            return ax_rx_buffer[5] + (ax_rx_buffer[6]<<8);
     358:	90 91 86 01 	lds	r25, 0x0186
     35c:	80 e0       	ldi	r24, 0x00	; 0
     35e:	20 91 85 01 	lds	r18, 0x0185
     362:	ac 01       	movw	r20, r24
     364:	42 0f       	add	r20, r18
     366:	51 1d       	adc	r21, r1
     368:	9a 01       	movw	r18, r20
    }else{
        return -1;
    }
}
     36a:	c9 01       	movw	r24, r18
     36c:	df 91       	pop	r29
     36e:	cf 91       	pop	r28
     370:	1f 91       	pop	r17
     372:	0f 91       	pop	r16
     374:	ff 90       	pop	r15
     376:	ef 90       	pop	r14
     378:	08 95       	ret

0000037a <ax12SetRegister>:

/* Set the value of a single-byte register. */
void ax12SetRegister(int id, int regstart, int data){
     37a:	df 92       	push	r13
     37c:	ef 92       	push	r14
     37e:	ff 92       	push	r15
     380:	0f 93       	push	r16
     382:	1f 93       	push	r17
     384:	8c 01       	movw	r16, r24
     386:	7b 01       	movw	r14, r22
     388:	d4 2e       	mov	r13, r20
    setTX(id);    
     38a:	0e 94 5d 00 	call	0xba	; 0xba <setTX>
    int checksum = ~((id + 4 + AX_WRITE_DATA + regstart + (data&0xff)) % 256);
    ax12writeB(0xFF);
     38e:	8f ef       	ldi	r24, 0xFF	; 255
     390:	0e 94 99 00 	call	0x132	; 0x132 <ax12writeB>
    ax12writeB(0xFF);
     394:	8f ef       	ldi	r24, 0xFF	; 255
     396:	0e 94 99 00 	call	0x132	; 0x132 <ax12writeB>
    ax12writeB(id);
     39a:	80 2f       	mov	r24, r16
     39c:	0e 94 99 00 	call	0x132	; 0x132 <ax12writeB>
    ax12writeB(4);    // length
     3a0:	84 e0       	ldi	r24, 0x04	; 4
     3a2:	0e 94 99 00 	call	0x132	; 0x132 <ax12writeB>
    ax12writeB(AX_WRITE_DATA);
     3a6:	83 e0       	ldi	r24, 0x03	; 3
     3a8:	0e 94 99 00 	call	0x132	; 0x132 <ax12writeB>
    ax12writeB(regstart);
     3ac:	8e 2d       	mov	r24, r14
     3ae:	0e 94 99 00 	call	0x132	; 0x132 <ax12writeB>
    ax12writeB(data&0xff);
     3b2:	8d 2d       	mov	r24, r13
     3b4:	0e 94 99 00 	call	0x132	; 0x132 <ax12writeB>
    // checksum = 
    ax12writeB(checksum);
     3b8:	09 5f       	subi	r16, 0xF9	; 249
     3ba:	1f 4f       	sbci	r17, 0xFF	; 255
     3bc:	0e 0d       	add	r16, r14
     3be:	1f 1d       	adc	r17, r15
     3c0:	c8 01       	movw	r24, r16
     3c2:	8d 0d       	add	r24, r13
     3c4:	91 1d       	adc	r25, r1
     3c6:	60 e0       	ldi	r22, 0x00	; 0
     3c8:	71 e0       	ldi	r23, 0x01	; 1
     3ca:	0e 94 c2 04 	call	0x984	; 0x984 <__divmodhi4>
     3ce:	80 95       	com	r24
     3d0:	0e 94 99 00 	call	0x132	; 0x132 <ax12writeB>
    //setRX(id);
    //ax12ReadPacket();
}
     3d4:	1f 91       	pop	r17
     3d6:	0f 91       	pop	r16
     3d8:	ff 90       	pop	r15
     3da:	ef 90       	pop	r14
     3dc:	df 90       	pop	r13
     3de:	08 95       	ret

000003e0 <ax12SetRegister2>:
/* Set the value of a double-byte register. */
void ax12SetRegister2(int id, int regstart, int data){
     3e0:	bf 92       	push	r11
     3e2:	cf 92       	push	r12
     3e4:	df 92       	push	r13
     3e6:	ef 92       	push	r14
     3e8:	ff 92       	push	r15
     3ea:	0f 93       	push	r16
     3ec:	1f 93       	push	r17
     3ee:	7c 01       	movw	r14, r24
     3f0:	6b 01       	movw	r12, r22
     3f2:	b4 2e       	mov	r11, r20
     3f4:	05 2f       	mov	r16, r21
    setTX(id);    
     3f6:	0e 94 5d 00 	call	0xba	; 0xba <setTX>
    int checksum = ~((id + 5 + AX_WRITE_DATA + regstart + (data&0xFF) + ((data&0xFF00)>>8)) % 256);
     3fa:	10 e0       	ldi	r17, 0x00	; 0
    ax12writeB(0xFF);
     3fc:	8f ef       	ldi	r24, 0xFF	; 255
     3fe:	0e 94 99 00 	call	0x132	; 0x132 <ax12writeB>
    ax12writeB(0xFF);
     402:	8f ef       	ldi	r24, 0xFF	; 255
     404:	0e 94 99 00 	call	0x132	; 0x132 <ax12writeB>
    ax12writeB(id);
     408:	8e 2d       	mov	r24, r14
     40a:	0e 94 99 00 	call	0x132	; 0x132 <ax12writeB>
    ax12writeB(5);    // length
     40e:	85 e0       	ldi	r24, 0x05	; 5
     410:	0e 94 99 00 	call	0x132	; 0x132 <ax12writeB>
    ax12writeB(AX_WRITE_DATA);
     414:	83 e0       	ldi	r24, 0x03	; 3
     416:	0e 94 99 00 	call	0x132	; 0x132 <ax12writeB>
    ax12writeB(regstart);
     41a:	8c 2d       	mov	r24, r12
     41c:	0e 94 99 00 	call	0x132	; 0x132 <ax12writeB>
    ax12writeB(data&0xff);
     420:	8b 2d       	mov	r24, r11
     422:	0e 94 99 00 	call	0x132	; 0x132 <ax12writeB>
    ax12writeB((data&0xff00)>>8);
     426:	80 2f       	mov	r24, r16
     428:	0e 94 99 00 	call	0x132	; 0x132 <ax12writeB>
    // checksum = 
    ax12writeB(checksum);
     42c:	88 e0       	ldi	r24, 0x08	; 8
     42e:	90 e0       	ldi	r25, 0x00	; 0
     430:	e8 0e       	add	r14, r24
     432:	f9 1e       	adc	r15, r25
     434:	ec 0c       	add	r14, r12
     436:	fd 1c       	adc	r15, r13
     438:	eb 0c       	add	r14, r11
     43a:	f1 1c       	adc	r15, r1
     43c:	0e 0d       	add	r16, r14
     43e:	1f 1d       	adc	r17, r15
     440:	80 2f       	mov	r24, r16
     442:	80 95       	com	r24
     444:	0e 94 99 00 	call	0x132	; 0x132 <ax12writeB>
    //setRX(id);
    //ax12ReadPacket();
}
     448:	1f 91       	pop	r17
     44a:	0f 91       	pop	r16
     44c:	ff 90       	pop	r15
     44e:	ef 90       	pop	r14
     450:	df 90       	pop	r13
     452:	cf 90       	pop	r12
     454:	bf 90       	pop	r11
     456:	08 95       	ret

00000458 <parse_serial>:
/** parse_serial()
	Assumes the input buffer has been populated with data of this form: ".c<val0>,<val1>,<val2>,...<val7>\n" as a char array
	This function reads this buffer, and populates the "vals" array with the integer representations of 10-bit values for each motor command
*/
void parse_serial(void)
{
     458:	ef 92       	push	r14
     45a:	ff 92       	push	r15
     45c:	0f 93       	push	r16
     45e:	1f 93       	push	r17
     460:	df 93       	push	r29
     462:	cf 93       	push	r28
     464:	00 d0       	rcall	.+0      	; 0x466 <parse_serial+0xe>
     466:	00 d0       	rcall	.+0      	; 0x468 <parse_serial+0x10>
     468:	cd b7       	in	r28, 0x3d	; 61
     46a:	de b7       	in	r29, 0x3e	; 62
	for (uint8_t i = 0; i < NUM_MOTORS; i++) vals[i] = 0;
     46c:	10 92 37 01 	sts	0x0137, r1
     470:	10 92 36 01 	sts	0x0136, r1
     474:	10 92 39 01 	sts	0x0139, r1
     478:	10 92 38 01 	sts	0x0138, r1
	//Skip leading '.' and command char
	uint8_t i = 2;
	uint8_t motor_num = 0;
	uint8_t mtr_tmp[4] = {10, 10, 10, 10};
     47c:	8a e0       	ldi	r24, 0x0A	; 10
     47e:	89 83       	std	Y+1, r24	; 0x01
     480:	8a 83       	std	Y+2, r24	; 0x02
     482:	8b 83       	std	Y+3, r24	; 0x03
     484:	8c 83       	std	Y+4, r24	; 0x04
     486:	a2 e0       	ldi	r26, 0x02	; 2
     488:	60 e0       	ldi	r22, 0x00	; 0
     48a:	90 e0       	ldi	r25, 0x00	; 0
			else if (mtr_tmp[2] < 10)	vals[motor_num] = mtr_tmp[0]*100 + mtr_tmp[1]*10 + mtr_tmp[2];
			else if (mtr_tmp[1] < 10)	vals[motor_num] = mtr_tmp[0]*10 + mtr_tmp[1];
			else						vals[motor_num] = mtr_tmp[0];
				
			motor_num++;
			for (uint8_t j = 0; j<4; j++) mtr_tmp[j] = 10;
     48c:	7a e0       	ldi	r23, 0x0A	; 10
	{	
		//look for the commas
		if (input[i] == ',' || input[i] == '\n')
		{
			if (mtr_tmp[3] < 10)		vals[motor_num] = mtr_tmp[0]*1000 + mtr_tmp[1]*100 + mtr_tmp[2]*10 + mtr_tmp[3];
			else if (mtr_tmp[2] < 10)	vals[motor_num] = mtr_tmp[0]*100 + mtr_tmp[1]*10 + mtr_tmp[2];
     48e:	b4 e6       	ldi	r27, 0x64	; 100
	while (motor_num < NUM_MOTORS)
	{	
		//look for the commas
		if (input[i] == ',' || input[i] == '\n')
		{
			if (mtr_tmp[3] < 10)		vals[motor_num] = mtr_tmp[0]*1000 + mtr_tmp[1]*100 + mtr_tmp[2]*10 + mtr_tmp[3];
     490:	28 ee       	ldi	r18, 0xE8	; 232
     492:	e2 2e       	mov	r14, r18
     494:	23 e0       	ldi	r18, 0x03	; 3
     496:	f2 2e       	mov	r15, r18
			mtr_tmp_pos = 0;
			
		}
		else
		{
			mtr_tmp[mtr_tmp_pos] = input[i] - '0';
     498:	8e 01       	movw	r16, r28
     49a:	0f 5f       	subi	r16, 0xFF	; 255
     49c:	1f 4f       	sbci	r17, 0xFF	; 255
	uint8_t mtr_tmp[4] = {10, 10, 10, 10};
	uint8_t mtr_tmp_pos = 0;
	while (motor_num < NUM_MOTORS)
	{	
		//look for the commas
		if (input[i] == ',' || input[i] == '\n')
     49e:	ea 2f       	mov	r30, r26
     4a0:	f0 e0       	ldi	r31, 0x00	; 0
     4a2:	ee 55       	subi	r30, 0x5E	; 94
     4a4:	fe 4f       	sbci	r31, 0xFE	; 254
     4a6:	80 81       	ld	r24, Z
     4a8:	8c 32       	cpi	r24, 0x2C	; 44
     4aa:	19 f0       	breq	.+6      	; 0x4b2 <parse_serial+0x5a>
     4ac:	8a 30       	cpi	r24, 0x0A	; 10
     4ae:	09 f0       	breq	.+2      	; 0x4b2 <parse_serial+0x5a>
     4b0:	56 c0       	rjmp	.+172    	; 0x55e <parse_serial+0x106>
		{
			if (mtr_tmp[3] < 10)		vals[motor_num] = mtr_tmp[0]*1000 + mtr_tmp[1]*100 + mtr_tmp[2]*10 + mtr_tmp[3];
     4b2:	5c 81       	ldd	r21, Y+4	; 0x04
     4b4:	4b 81       	ldd	r20, Y+3	; 0x03
     4b6:	5a 30       	cpi	r21, 0x0A	; 10
     4b8:	f8 f4       	brcc	.+62     	; 0x4f8 <parse_serial+0xa0>
     4ba:	e6 2f       	mov	r30, r22
     4bc:	f0 e0       	ldi	r31, 0x00	; 0
     4be:	ee 0f       	add	r30, r30
     4c0:	ff 1f       	adc	r31, r31
     4c2:	ea 5c       	subi	r30, 0xCA	; 202
     4c4:	fe 4f       	sbci	r31, 0xFE	; 254
     4c6:	89 81       	ldd	r24, Y+1	; 0x01
     4c8:	90 e0       	ldi	r25, 0x00	; 0
     4ca:	8e 9d       	mul	r24, r14
     4cc:	90 01       	movw	r18, r0
     4ce:	8f 9d       	mul	r24, r15
     4d0:	30 0d       	add	r19, r0
     4d2:	9e 9d       	mul	r25, r14
     4d4:	30 0d       	add	r19, r0
     4d6:	11 24       	eor	r1, r1
     4d8:	8a 81       	ldd	r24, Y+2	; 0x02
     4da:	8b 9f       	mul	r24, r27
     4dc:	c0 01       	movw	r24, r0
     4de:	11 24       	eor	r1, r1
     4e0:	28 0f       	add	r18, r24
     4e2:	39 1f       	adc	r19, r25
     4e4:	25 0f       	add	r18, r21
     4e6:	31 1d       	adc	r19, r1
     4e8:	47 9f       	mul	r20, r23
     4ea:	c0 01       	movw	r24, r0
     4ec:	11 24       	eor	r1, r1
     4ee:	28 0f       	add	r18, r24
     4f0:	39 1f       	adc	r19, r25
     4f2:	31 83       	std	Z+1, r19	; 0x01
     4f4:	20 83       	st	Z, r18
     4f6:	2c c0       	rjmp	.+88     	; 0x550 <parse_serial+0xf8>
     4f8:	2a 81       	ldd	r18, Y+2	; 0x02
			else if (mtr_tmp[2] < 10)	vals[motor_num] = mtr_tmp[0]*100 + mtr_tmp[1]*10 + mtr_tmp[2];
     4fa:	4a 30       	cpi	r20, 0x0A	; 10
     4fc:	90 f4       	brcc	.+36     	; 0x522 <parse_serial+0xca>
     4fe:	e6 2f       	mov	r30, r22
     500:	f0 e0       	ldi	r31, 0x00	; 0
     502:	ee 0f       	add	r30, r30
     504:	ff 1f       	adc	r31, r31
     506:	ea 5c       	subi	r30, 0xCA	; 202
     508:	fe 4f       	sbci	r31, 0xFE	; 254
     50a:	89 81       	ldd	r24, Y+1	; 0x01
     50c:	8b 9f       	mul	r24, r27
     50e:	c0 01       	movw	r24, r0
     510:	11 24       	eor	r1, r1
     512:	27 9f       	mul	r18, r23
     514:	90 01       	movw	r18, r0
     516:	11 24       	eor	r1, r1
     518:	82 0f       	add	r24, r18
     51a:	93 1f       	adc	r25, r19
     51c:	84 0f       	add	r24, r20
     51e:	91 1d       	adc	r25, r1
     520:	0e c0       	rjmp	.+28     	; 0x53e <parse_serial+0xe6>
     522:	e6 2f       	mov	r30, r22
     524:	f0 e0       	ldi	r31, 0x00	; 0
     526:	89 81       	ldd	r24, Y+1	; 0x01
			else if (mtr_tmp[1] < 10)	vals[motor_num] = mtr_tmp[0]*10 + mtr_tmp[1];
     528:	2a 30       	cpi	r18, 0x0A	; 10
     52a:	60 f4       	brcc	.+24     	; 0x544 <parse_serial+0xec>
     52c:	ee 0f       	add	r30, r30
     52e:	ff 1f       	adc	r31, r31
     530:	ea 5c       	subi	r30, 0xCA	; 202
     532:	fe 4f       	sbci	r31, 0xFE	; 254
     534:	87 9f       	mul	r24, r23
     536:	c0 01       	movw	r24, r0
     538:	11 24       	eor	r1, r1
     53a:	82 0f       	add	r24, r18
     53c:	91 1d       	adc	r25, r1
     53e:	91 83       	std	Z+1, r25	; 0x01
     540:	80 83       	st	Z, r24
     542:	06 c0       	rjmp	.+12     	; 0x550 <parse_serial+0xf8>
			else						vals[motor_num] = mtr_tmp[0];
     544:	ee 0f       	add	r30, r30
     546:	ff 1f       	adc	r31, r31
     548:	ea 5c       	subi	r30, 0xCA	; 202
     54a:	fe 4f       	sbci	r31, 0xFE	; 254
     54c:	80 83       	st	Z, r24
     54e:	11 82       	std	Z+1, r1	; 0x01
				
			motor_num++;
			for (uint8_t j = 0; j<4; j++) mtr_tmp[j] = 10;
     550:	79 83       	std	Y+1, r23	; 0x01
     552:	7a 83       	std	Y+2, r23	; 0x02
     554:	7b 83       	std	Y+3, r23	; 0x03
     556:	7c 83       	std	Y+4, r23	; 0x04
			if (mtr_tmp[3] < 10)		vals[motor_num] = mtr_tmp[0]*1000 + mtr_tmp[1]*100 + mtr_tmp[2]*10 + mtr_tmp[3];
			else if (mtr_tmp[2] < 10)	vals[motor_num] = mtr_tmp[0]*100 + mtr_tmp[1]*10 + mtr_tmp[2];
			else if (mtr_tmp[1] < 10)	vals[motor_num] = mtr_tmp[0]*10 + mtr_tmp[1];
			else						vals[motor_num] = mtr_tmp[0];
				
			motor_num++;
     558:	6f 5f       	subi	r22, 0xFF	; 255
     55a:	90 e0       	ldi	r25, 0x00	; 0
     55c:	06 c0       	rjmp	.+12     	; 0x56a <parse_serial+0x112>
			mtr_tmp_pos = 0;
			
		}
		else
		{
			mtr_tmp[mtr_tmp_pos] = input[i] - '0';
     55e:	f8 01       	movw	r30, r16
     560:	e9 0f       	add	r30, r25
     562:	f1 1d       	adc	r31, r1
     564:	80 53       	subi	r24, 0x30	; 48
     566:	80 83       	st	Z, r24
			mtr_tmp_pos++;
     568:	9f 5f       	subi	r25, 0xFF	; 255
	//Skip leading '.' and command char
	uint8_t i = 2;
	uint8_t motor_num = 0;
	uint8_t mtr_tmp[4] = {10, 10, 10, 10};
	uint8_t mtr_tmp_pos = 0;
	while (motor_num < NUM_MOTORS)
     56a:	62 30       	cpi	r22, 0x02	; 2
     56c:	10 f4       	brcc	.+4      	; 0x572 <parse_serial+0x11a>
		else
		{
			mtr_tmp[mtr_tmp_pos] = input[i] - '0';
			mtr_tmp_pos++;
		}
		i++;
     56e:	af 5f       	subi	r26, 0xFF	; 255
     570:	96 cf       	rjmp	.-212    	; 0x49e <parse_serial+0x46>
	}
}
     572:	0f 90       	pop	r0
     574:	0f 90       	pop	r0
     576:	0f 90       	pop	r0
     578:	0f 90       	pop	r0
     57a:	cf 91       	pop	r28
     57c:	df 91       	pop	r29
     57e:	1f 91       	pop	r17
     580:	0f 91       	pop	r16
     582:	ff 90       	pop	r15
     584:	ef 90       	pop	r14
     586:	08 95       	ret

00000588 <initialize>:
	Sets up the UARTS, configures pin directions, says hello, then blinks at you.
*/
void initialize(void)
{
	//init the UART0 to the Computer
	uart_init();
     588:	0e 94 9b 04 	call	0x936	; 0x936 <uart_init>
	stdout = &uart_output;
     58c:	89 e1       	ldi	r24, 0x19	; 25
     58e:	91 e0       	ldi	r25, 0x01	; 1
     590:	90 93 e2 01 	sts	0x01E2, r25
     594:	80 93 e1 01 	sts	0x01E1, r24
	stdin  = &uart_input;
     598:	87 e2       	ldi	r24, 0x27	; 39
     59a:	91 e0       	ldi	r25, 0x01	; 1
     59c:	90 93 e0 01 	sts	0x01E0, r25
     5a0:	80 93 df 01 	sts	0x01DF, r24
	
	//Initialize the AX12 UART1
	ax12Init(1000000);
     5a4:	60 e4       	ldi	r22, 0x40	; 64
     5a6:	72 e4       	ldi	r23, 0x42	; 66
     5a8:	8f e0       	ldi	r24, 0x0F	; 15
     5aa:	90 e0       	ldi	r25, 0x00	; 0
     5ac:	0e 94 2e 01 	call	0x25c	; 0x25c <ax12Init>
	
	//Initialize Pin Directions and States for I/O
	DDRB |= (DEBUG_LED_NUM);
     5b0:	20 9a       	sbi	0x04, 0	; 4
	DEBUG_LED_OFF();
     5b2:	28 98       	cbi	0x05, 0	; 5

	//We're live.  Say Hello
	fprintf(stdout,".h\n");
     5b4:	60 91 e1 01 	lds	r22, 0x01E1
     5b8:	70 91 e2 01 	lds	r23, 0x01E2
     5bc:	80 e0       	ldi	r24, 0x00	; 0
     5be:	91 e0       	ldi	r25, 0x01	; 1
     5c0:	0e 94 78 05 	call	0xaf0	; 0xaf0 <fputs>
	
	//Blink The Board LED and all Dynamixel LEDs to show We're good to go
	for (int i = 0; i<NUM_MOTORS; i++) ax12SetRegister(i, AX_LED, 0);
     5c4:	80 e0       	ldi	r24, 0x00	; 0
     5c6:	90 e0       	ldi	r25, 0x00	; 0
     5c8:	69 e1       	ldi	r22, 0x19	; 25
     5ca:	70 e0       	ldi	r23, 0x00	; 0
     5cc:	40 e0       	ldi	r20, 0x00	; 0
     5ce:	50 e0       	ldi	r21, 0x00	; 0
     5d0:	0e 94 bd 01 	call	0x37a	; 0x37a <ax12SetRegister>
     5d4:	81 e0       	ldi	r24, 0x01	; 1
     5d6:	90 e0       	ldi	r25, 0x00	; 0
     5d8:	69 e1       	ldi	r22, 0x19	; 25
     5da:	70 e0       	ldi	r23, 0x00	; 0
     5dc:	40 e0       	ldi	r20, 0x00	; 0
     5de:	50 e0       	ldi	r21, 0x00	; 0
     5e0:	0e 94 bd 01 	call	0x37a	; 0x37a <ax12SetRegister>
	DEBUG_LED_OFF();
     5e4:	28 98       	cbi	0x05, 0	; 5
     5e6:	88 e8       	ldi	r24, 0x88	; 136
     5e8:	93 e1       	ldi	r25, 0x13	; 19
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     5ea:	20 e9       	ldi	r18, 0x90	; 144
     5ec:	31 e0       	ldi	r19, 0x01	; 1
     5ee:	f9 01       	movw	r30, r18
     5f0:	31 97       	sbiw	r30, 0x01	; 1
     5f2:	f1 f7       	brne	.-4      	; 0x5f0 <initialize+0x68>
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     5f4:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     5f6:	d9 f7       	brne	.-10     	; 0x5ee <initialize+0x66>
	_delay_ms(500);
	for (int i = 0; i<NUM_MOTORS; i++) ax12SetRegister(i, AX_LED, 1);
     5f8:	80 e0       	ldi	r24, 0x00	; 0
     5fa:	90 e0       	ldi	r25, 0x00	; 0
     5fc:	69 e1       	ldi	r22, 0x19	; 25
     5fe:	70 e0       	ldi	r23, 0x00	; 0
     600:	41 e0       	ldi	r20, 0x01	; 1
     602:	50 e0       	ldi	r21, 0x00	; 0
     604:	0e 94 bd 01 	call	0x37a	; 0x37a <ax12SetRegister>
     608:	81 e0       	ldi	r24, 0x01	; 1
     60a:	90 e0       	ldi	r25, 0x00	; 0
     60c:	69 e1       	ldi	r22, 0x19	; 25
     60e:	70 e0       	ldi	r23, 0x00	; 0
     610:	41 e0       	ldi	r20, 0x01	; 1
     612:	50 e0       	ldi	r21, 0x00	; 0
     614:	0e 94 bd 01 	call	0x37a	; 0x37a <ax12SetRegister>
	DEBUG_LED_ON();
     618:	28 9a       	sbi	0x05, 0	; 5
     61a:	88 e8       	ldi	r24, 0x88	; 136
     61c:	93 e1       	ldi	r25, 0x13	; 19
     61e:	20 e9       	ldi	r18, 0x90	; 144
     620:	31 e0       	ldi	r19, 0x01	; 1
     622:	f9 01       	movw	r30, r18
     624:	31 97       	sbiw	r30, 0x01	; 1
     626:	f1 f7       	brne	.-4      	; 0x624 <initialize+0x9c>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     628:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     62a:	d9 f7       	brne	.-10     	; 0x622 <initialize+0x9a>
	_delay_ms(500);
	for (int i = 0; i<NUM_MOTORS; i++) ax12SetRegister(i, AX_LED, 0);
     62c:	80 e0       	ldi	r24, 0x00	; 0
     62e:	90 e0       	ldi	r25, 0x00	; 0
     630:	69 e1       	ldi	r22, 0x19	; 25
     632:	70 e0       	ldi	r23, 0x00	; 0
     634:	40 e0       	ldi	r20, 0x00	; 0
     636:	50 e0       	ldi	r21, 0x00	; 0
     638:	0e 94 bd 01 	call	0x37a	; 0x37a <ax12SetRegister>
     63c:	81 e0       	ldi	r24, 0x01	; 1
     63e:	90 e0       	ldi	r25, 0x00	; 0
     640:	69 e1       	ldi	r22, 0x19	; 25
     642:	70 e0       	ldi	r23, 0x00	; 0
     644:	40 e0       	ldi	r20, 0x00	; 0
     646:	50 e0       	ldi	r21, 0x00	; 0
     648:	0e 94 bd 01 	call	0x37a	; 0x37a <ax12SetRegister>
	DEBUG_LED_OFF();
     64c:	28 98       	cbi	0x05, 0	; 5
	
	
	
}
     64e:	08 95       	ret

00000650 <main>:


/** Main program entry point. This routine contains the overall program flow
 */
int main(void)
{
     650:	4f 92       	push	r4
     652:	5f 92       	push	r5
     654:	6f 92       	push	r6
     656:	7f 92       	push	r7
     658:	8f 92       	push	r8
     65a:	9f 92       	push	r9
     65c:	bf 92       	push	r11
     65e:	cf 92       	push	r12
     660:	df 92       	push	r13
     662:	ef 92       	push	r14
     664:	ff 92       	push	r15
     666:	0f 93       	push	r16
     668:	1f 93       	push	r17
     66a:	cf 93       	push	r28
     66c:	df 93       	push	r29
	initialize(); 	//Configures Ports, sets default values, etc.
     66e:	0e 94 c4 02 	call	0x588	; 0x588 <initialize>

	//Loop Forever
	for (;;)
	{
		//we add data starting with an '.' to the buffer until we get the newline character.
		fgets(input, sizeof(input), stdin); 	//Get the actual input (reads up to and including newline character)
     672:	e2 ea       	ldi	r30, 0xA2	; 162
     674:	ee 2e       	mov	r14, r30
     676:	e1 e0       	ldi	r30, 0x01	; 1
     678:	fe 2e       	mov	r15, r30
		cmd = input[1]; 						//command char is always the first char of the input data after the '.'
		
		//Command = 'q' - Query for the current status
		if (cmd == 'q')
		{
			memset(input, 0, sizeof(input)); 							//Clear previous input
     67a:	7c e3       	ldi	r23, 0x3C	; 60
     67c:	b7 2e       	mov	r11, r23
			fprintf(stdout, ".q%d\n",   FIRMWARE_VERSION);  			//ACK w/ Firmware Version
     67e:	64 e0       	ldi	r22, 0x04	; 4
     680:	46 2e       	mov	r4, r22
     682:	61 e0       	ldi	r22, 0x01	; 1
     684:	56 2e       	mov	r5, r22
			
			//Send ACK Info
			for (int i = 0; i<NUM_MOTORS; i++)
			{
				while(ax12GetRegister(i,AX_MOVING,1));									//Wait for this motor to finish moving
				fprintf(stdout, "%d", ax12GetRegister(i, AX_PRESENT_POSITION_L, 2));	//Return the present position
     686:	53 e1       	ldi	r21, 0x13	; 19
     688:	c5 2e       	mov	r12, r21
     68a:	51 e0       	ldi	r21, 0x01	; 1
     68c:	d5 2e       	mov	r13, r21
     68e:	40 e9       	ldi	r20, 0x90	; 144
     690:	64 2e       	mov	r6, r20
     692:	41 e0       	ldi	r20, 0x01	; 1
     694:	74 2e       	mov	r7, r20
		else if (cmd == 'l')
		{
			if (input[2] == '1')		DEBUG_LED_ON();					//Turn LED On
			else if (input[2] == '0')	DEBUG_LED_OFF();				//Turn LED Off
			memset(input, 0, sizeof(input)); 							//Clear previous input
			fprintf(stdout, ".l%d\n", DEBUG_LED_STATE());				//ACK		
     696:	3a e0       	ldi	r19, 0x0A	; 10
     698:	83 2e       	mov	r8, r19
     69a:	31 e0       	ldi	r19, 0x01	; 1
     69c:	93 2e       	mov	r9, r19

	//Loop Forever
	for (;;)
	{
		//we add data starting with an '.' to the buffer until we get the newline character.
		fgets(input, sizeof(input), stdin); 	//Get the actual input (reads up to and including newline character)
     69e:	40 91 df 01 	lds	r20, 0x01DF
     6a2:	50 91 e0 01 	lds	r21, 0x01E0
     6a6:	82 ea       	ldi	r24, 0xA2	; 162
     6a8:	91 e0       	ldi	r25, 0x01	; 1
     6aa:	6c e3       	ldi	r22, 0x3C	; 60
     6ac:	70 e0       	ldi	r23, 0x00	; 0
     6ae:	0e 94 0b 05 	call	0xa16	; 0xa16 <fgets>
		cmd = input[1]; 						//command char is always the first char of the input data after the '.'
     6b2:	80 91 a3 01 	lds	r24, 0x01A3
     6b6:	80 93 de 01 	sts	0x01DE, r24
		
		//Command = 'q' - Query for the current status
		if (cmd == 'q')
     6ba:	81 37       	cpi	r24, 0x71	; 113
     6bc:	d1 f4       	brne	.+52     	; 0x6f2 <main+0xa2>
		{
			memset(input, 0, sizeof(input)); 							//Clear previous input
     6be:	d7 01       	movw	r26, r14
     6c0:	eb 2d       	mov	r30, r11
     6c2:	1d 92       	st	X+, r1
     6c4:	ea 95       	dec	r30
     6c6:	e9 f7       	brne	.-6      	; 0x6c2 <main+0x72>
			fprintf(stdout, ".q%d\n",   FIRMWARE_VERSION);  			//ACK w/ Firmware Version
     6c8:	00 d0       	rcall	.+0      	; 0x6ca <main+0x7a>
     6ca:	00 d0       	rcall	.+0      	; 0x6cc <main+0x7c>
     6cc:	00 d0       	rcall	.+0      	; 0x6ce <main+0x7e>
     6ce:	ed b7       	in	r30, 0x3d	; 61
     6d0:	fe b7       	in	r31, 0x3e	; 62
     6d2:	31 96       	adiw	r30, 0x01	; 1
     6d4:	80 91 e1 01 	lds	r24, 0x01E1
     6d8:	90 91 e2 01 	lds	r25, 0x01E2
     6dc:	ad b7       	in	r26, 0x3d	; 61
     6de:	be b7       	in	r27, 0x3e	; 62
     6e0:	12 96       	adiw	r26, 0x02	; 2
     6e2:	9c 93       	st	X, r25
     6e4:	8e 93       	st	-X, r24
     6e6:	11 97       	sbiw	r26, 0x01	; 1
     6e8:	53 82       	std	Z+3, r5	; 0x03
     6ea:	42 82       	std	Z+2, r4	; 0x02
     6ec:	15 82       	std	Z+5, r1	; 0x05
     6ee:	14 82       	std	Z+4, r1	; 0x04
     6f0:	28 c0       	rjmp	.+80     	; 0x742 <main+0xf2>
		}
		
		//Command = 'l' - Command to Control Debug LED
		else if (cmd == 'l')
     6f2:	8c 36       	cpi	r24, 0x6C	; 108
     6f4:	89 f5       	brne	.+98     	; 0x758 <main+0x108>
		{
			if (input[2] == '1')		DEBUG_LED_ON();					//Turn LED On
     6f6:	80 91 a4 01 	lds	r24, 0x01A4
     6fa:	81 33       	cpi	r24, 0x31	; 49
     6fc:	11 f4       	brne	.+4      	; 0x702 <main+0xb2>
     6fe:	28 9a       	sbi	0x05, 0	; 5
     700:	03 c0       	rjmp	.+6      	; 0x708 <main+0xb8>
			else if (input[2] == '0')	DEBUG_LED_OFF();				//Turn LED Off
     702:	80 33       	cpi	r24, 0x30	; 48
     704:	09 f4       	brne	.+2      	; 0x708 <main+0xb8>
     706:	28 98       	cbi	0x05, 0	; 5
			memset(input, 0, sizeof(input)); 							//Clear previous input
     708:	d7 01       	movw	r26, r14
     70a:	eb 2d       	mov	r30, r11
     70c:	1d 92       	st	X+, r1
     70e:	ea 95       	dec	r30
     710:	e9 f7       	brne	.-6      	; 0x70c <main+0xbc>
			fprintf(stdout, ".l%d\n", DEBUG_LED_STATE());				//ACK		
     712:	83 b1       	in	r24, 0x03	; 3
     714:	00 d0       	rcall	.+0      	; 0x716 <main+0xc6>
     716:	00 d0       	rcall	.+0      	; 0x718 <main+0xc8>
     718:	00 d0       	rcall	.+0      	; 0x71a <main+0xca>
     71a:	ed b7       	in	r30, 0x3d	; 61
     71c:	fe b7       	in	r31, 0x3e	; 62
     71e:	31 96       	adiw	r30, 0x01	; 1
     720:	20 91 e1 01 	lds	r18, 0x01E1
     724:	30 91 e2 01 	lds	r19, 0x01E2
     728:	ad b7       	in	r26, 0x3d	; 61
     72a:	be b7       	in	r27, 0x3e	; 62
     72c:	12 96       	adiw	r26, 0x02	; 2
     72e:	3c 93       	st	X, r19
     730:	2e 93       	st	-X, r18
     732:	11 97       	sbiw	r26, 0x01	; 1
     734:	93 82       	std	Z+3, r9	; 0x03
     736:	82 82       	std	Z+2, r8	; 0x02
     738:	90 e0       	ldi	r25, 0x00	; 0
     73a:	81 70       	andi	r24, 0x01	; 1
     73c:	90 70       	andi	r25, 0x00	; 0
     73e:	95 83       	std	Z+5, r25	; 0x05
     740:	84 83       	std	Z+4, r24	; 0x04
     742:	0e 94 38 05 	call	0xa70	; 0xa70 <fprintf>
     746:	ed b7       	in	r30, 0x3d	; 61
     748:	fe b7       	in	r31, 0x3e	; 62
     74a:	36 96       	adiw	r30, 0x06	; 6
     74c:	0f b6       	in	r0, 0x3f	; 63
     74e:	f8 94       	cli
     750:	fe bf       	out	0x3e, r31	; 62
     752:	0f be       	out	0x3f, r0	; 63
     754:	ed bf       	out	0x3d, r30	; 61
     756:	a3 cf       	rjmp	.-186    	; 0x69e <main+0x4e>
		}
		
		//Command = 'v' - Sets all motor speeds
		//Comma separated entries telling all motors to set certain speeds
		//Assumes motor IDs are 0 <-> NUM_MOTORS-1
		else if (cmd == 'v')
     758:	86 37       	cpi	r24, 0x76	; 118
     75a:	09 f0       	breq	.+2      	; 0x75e <main+0x10e>
     75c:	7f c0       	rjmp	.+254    	; 0x85c <main+0x20c>
		{
			parse_serial();						//Read the input string to an array of values
     75e:	0e 94 2c 02 	call	0x458	; 0x458 <parse_serial>
			memset(input, 0, sizeof(input)); 	//Clear previous input
     762:	d7 01       	movw	r26, r14
     764:	eb 2d       	mov	r30, r11
     766:	1d 92       	st	X+, r1
     768:	ea 95       	dec	r30
     76a:	e9 f7       	brne	.-6      	; 0x766 <main+0x116>
			
			//send those speed commands
			for (int i = 0; i<NUM_MOTORS; i++)
			{
				ax12SetRegister2(i, AX_GOAL_SPEED_L, vals[i]);
     76c:	40 91 36 01 	lds	r20, 0x0136
     770:	50 91 37 01 	lds	r21, 0x0137
     774:	80 e0       	ldi	r24, 0x00	; 0
     776:	90 e0       	ldi	r25, 0x00	; 0
     778:	60 e2       	ldi	r22, 0x20	; 32
     77a:	70 e0       	ldi	r23, 0x00	; 0
     77c:	0e 94 f0 01 	call	0x3e0	; 0x3e0 <ax12SetRegister2>
     780:	40 91 38 01 	lds	r20, 0x0138
     784:	50 91 39 01 	lds	r21, 0x0139
     788:	81 e0       	ldi	r24, 0x01	; 1
     78a:	90 e0       	ldi	r25, 0x00	; 0
     78c:	60 e2       	ldi	r22, 0x20	; 32
     78e:	70 e0       	ldi	r23, 0x00	; 0
     790:	0e 94 f0 01 	call	0x3e0	; 0x3e0 <ax12SetRegister2>
     794:	8a ef       	ldi	r24, 0xFA	; 250
     796:	90 e0       	ldi	r25, 0x00	; 0
     798:	f3 01       	movw	r30, r6
     79a:	31 97       	sbiw	r30, 0x01	; 1
     79c:	f1 f7       	brne	.-4      	; 0x79a <main+0x14a>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     79e:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     7a0:	d9 f7       	brne	.-10     	; 0x798 <main+0x148>
			}
			_delay_ms(25);
			//Only after we have commanded all the speeds, can we check the status
			fprintf(stdout, ".v");														//ACK Character
     7a2:	60 91 e1 01 	lds	r22, 0x01E1
     7a6:	70 91 e2 01 	lds	r23, 0x01E2
     7aa:	80 e1       	ldi	r24, 0x10	; 16
     7ac:	91 e0       	ldi	r25, 0x01	; 1
     7ae:	0e 94 78 05 	call	0xaf0	; 0xaf0 <fputs>
			
			//Send ACK Info
			for (int i = 0; i<NUM_MOTORS; i++)
			{
				fprintf(stdout, "%d", ax12GetRegister(i, AX_GOAL_SPEED_L, 2));	//Return velocity setting
     7b2:	00 91 e1 01 	lds	r16, 0x01E1
     7b6:	10 91 e2 01 	lds	r17, 0x01E2
     7ba:	80 e0       	ldi	r24, 0x00	; 0
     7bc:	90 e0       	ldi	r25, 0x00	; 0
     7be:	60 e2       	ldi	r22, 0x20	; 32
     7c0:	70 e0       	ldi	r23, 0x00	; 0
     7c2:	42 e0       	ldi	r20, 0x02	; 2
     7c4:	50 e0       	ldi	r21, 0x00	; 0
     7c6:	0e 94 65 01 	call	0x2ca	; 0x2ca <ax12GetRegister>
     7ca:	00 d0       	rcall	.+0      	; 0x7cc <main+0x17c>
     7cc:	00 d0       	rcall	.+0      	; 0x7ce <main+0x17e>
     7ce:	00 d0       	rcall	.+0      	; 0x7d0 <main+0x180>
     7d0:	ed b7       	in	r30, 0x3d	; 61
     7d2:	fe b7       	in	r31, 0x3e	; 62
     7d4:	31 96       	adiw	r30, 0x01	; 1
     7d6:	ad b7       	in	r26, 0x3d	; 61
     7d8:	be b7       	in	r27, 0x3e	; 62
     7da:	12 96       	adiw	r26, 0x02	; 2
     7dc:	1c 93       	st	X, r17
     7de:	0e 93       	st	-X, r16
     7e0:	11 97       	sbiw	r26, 0x01	; 1
     7e2:	d3 82       	std	Z+3, r13	; 0x03
     7e4:	c2 82       	std	Z+2, r12	; 0x02
     7e6:	95 83       	std	Z+5, r25	; 0x05
     7e8:	84 83       	std	Z+4, r24	; 0x04
     7ea:	0e 94 38 05 	call	0xa70	; 0xa70 <fprintf>
				if (i<NUM_MOTORS-1) fprintf(stdout, ",");								//Print delimiter
     7ee:	ed b7       	in	r30, 0x3d	; 61
     7f0:	fe b7       	in	r31, 0x3e	; 62
     7f2:	36 96       	adiw	r30, 0x06	; 6
     7f4:	0f b6       	in	r0, 0x3f	; 63
     7f6:	f8 94       	cli
     7f8:	fe bf       	out	0x3e, r31	; 62
     7fa:	0f be       	out	0x3f, r0	; 63
     7fc:	ed bf       	out	0x3d, r30	; 61
     7fe:	60 91 e1 01 	lds	r22, 0x01E1
     802:	70 91 e2 01 	lds	r23, 0x01E2
     806:	8c e2       	ldi	r24, 0x2C	; 44
     808:	90 e0       	ldi	r25, 0x00	; 0
     80a:	0e 94 4c 05 	call	0xa98	; 0xa98 <fputc>
			fprintf(stdout, ".v");														//ACK Character
			
			//Send ACK Info
			for (int i = 0; i<NUM_MOTORS; i++)
			{
				fprintf(stdout, "%d", ax12GetRegister(i, AX_GOAL_SPEED_L, 2));	//Return velocity setting
     80e:	00 91 e1 01 	lds	r16, 0x01E1
     812:	10 91 e2 01 	lds	r17, 0x01E2
     816:	81 e0       	ldi	r24, 0x01	; 1
     818:	90 e0       	ldi	r25, 0x00	; 0
     81a:	60 e2       	ldi	r22, 0x20	; 32
     81c:	70 e0       	ldi	r23, 0x00	; 0
     81e:	42 e0       	ldi	r20, 0x02	; 2
     820:	50 e0       	ldi	r21, 0x00	; 0
     822:	0e 94 65 01 	call	0x2ca	; 0x2ca <ax12GetRegister>
     826:	00 d0       	rcall	.+0      	; 0x828 <main+0x1d8>
     828:	00 d0       	rcall	.+0      	; 0x82a <main+0x1da>
     82a:	00 d0       	rcall	.+0      	; 0x82c <main+0x1dc>
     82c:	ed b7       	in	r30, 0x3d	; 61
     82e:	fe b7       	in	r31, 0x3e	; 62
     830:	31 96       	adiw	r30, 0x01	; 1
     832:	ad b7       	in	r26, 0x3d	; 61
     834:	be b7       	in	r27, 0x3e	; 62
     836:	12 96       	adiw	r26, 0x02	; 2
     838:	1c 93       	st	X, r17
     83a:	0e 93       	st	-X, r16
     83c:	11 97       	sbiw	r26, 0x01	; 1
     83e:	d3 82       	std	Z+3, r13	; 0x03
     840:	c2 82       	std	Z+2, r12	; 0x02
     842:	95 83       	std	Z+5, r25	; 0x05
     844:	84 83       	std	Z+4, r24	; 0x04
     846:	0e 94 38 05 	call	0xa70	; 0xa70 <fprintf>
				if (i<NUM_MOTORS-1) fprintf(stdout, ",");								//Print delimiter
			}
			
			fprintf(stdout, "\n");														//ACK Newline
     84a:	ed b7       	in	r30, 0x3d	; 61
     84c:	fe b7       	in	r31, 0x3e	; 62
     84e:	36 96       	adiw	r30, 0x06	; 6
     850:	0f b6       	in	r0, 0x3f	; 63
     852:	f8 94       	cli
     854:	fe bf       	out	0x3e, r31	; 62
     856:	0f be       	out	0x3f, r0	; 63
     858:	ed bf       	out	0x3d, r30	; 61
     85a:	64 c0       	rjmp	.+200    	; 0x924 <main+0x2d4>
		}
		
		//Command = 'c' - Command all the motors to a new position
		//Comma separated entries telling all motors to move to positions from 0-1023
		//Assumes motor IDs are 0 <-> NUM_MOTORS-1
		else if (cmd == 'c')
     85c:	83 36       	cpi	r24, 0x63	; 99
     85e:	09 f0       	breq	.+2      	; 0x862 <main+0x212>
     860:	1e cf       	rjmp	.-452    	; 0x69e <main+0x4e>
		{
			parse_serial();						//Read the input string to an array of positions
     862:	0e 94 2c 02 	call	0x458	; 0x458 <parse_serial>
			memset(input, 0, sizeof(input)); 	//Clear previous input
     866:	d7 01       	movw	r26, r14
     868:	eb 2d       	mov	r30, r11
     86a:	1d 92       	st	X+, r1
     86c:	ea 95       	dec	r30
     86e:	e9 f7       	brne	.-6      	; 0x86a <main+0x21a>
			
			//send those position commands
			for (int i = 0; i<NUM_MOTORS; i++)
			{
				ax12SetRegister2(i, AX_GOAL_POSITION_L, vals[i]);
     870:	40 91 36 01 	lds	r20, 0x0136
     874:	50 91 37 01 	lds	r21, 0x0137
     878:	80 e0       	ldi	r24, 0x00	; 0
     87a:	90 e0       	ldi	r25, 0x00	; 0
     87c:	6e e1       	ldi	r22, 0x1E	; 30
     87e:	70 e0       	ldi	r23, 0x00	; 0
     880:	0e 94 f0 01 	call	0x3e0	; 0x3e0 <ax12SetRegister2>
     884:	40 91 38 01 	lds	r20, 0x0138
     888:	50 91 39 01 	lds	r21, 0x0139
     88c:	81 e0       	ldi	r24, 0x01	; 1
     88e:	90 e0       	ldi	r25, 0x00	; 0
     890:	6e e1       	ldi	r22, 0x1E	; 30
     892:	70 e0       	ldi	r23, 0x00	; 0
     894:	0e 94 f0 01 	call	0x3e0	; 0x3e0 <ax12SetRegister2>
			}
			
			//Only after we have commanded all the positions, can we check the status
			fprintf(stdout, ".c");														//ACK Character
     898:	60 91 e1 01 	lds	r22, 0x01E1
     89c:	70 91 e2 01 	lds	r23, 0x01E2
     8a0:	86 e1       	ldi	r24, 0x16	; 22
     8a2:	91 e0       	ldi	r25, 0x01	; 1
     8a4:	0e 94 78 05 	call	0xaf0	; 0xaf0 <fputs>
     8a8:	c0 e0       	ldi	r28, 0x00	; 0
     8aa:	d0 e0       	ldi	r29, 0x00	; 0
			
			//Send ACK Info
			for (int i = 0; i<NUM_MOTORS; i++)
			{
				while(ax12GetRegister(i,AX_MOVING,1));									//Wait for this motor to finish moving
     8ac:	ce 01       	movw	r24, r28
     8ae:	6e e2       	ldi	r22, 0x2E	; 46
     8b0:	70 e0       	ldi	r23, 0x00	; 0
     8b2:	41 e0       	ldi	r20, 0x01	; 1
     8b4:	50 e0       	ldi	r21, 0x00	; 0
     8b6:	0e 94 65 01 	call	0x2ca	; 0x2ca <ax12GetRegister>
     8ba:	89 2b       	or	r24, r25
     8bc:	b9 f7       	brne	.-18     	; 0x8ac <main+0x25c>
				fprintf(stdout, "%d", ax12GetRegister(i, AX_PRESENT_POSITION_L, 2));	//Return the present position
     8be:	00 91 e1 01 	lds	r16, 0x01E1
     8c2:	10 91 e2 01 	lds	r17, 0x01E2
     8c6:	ce 01       	movw	r24, r28
     8c8:	64 e2       	ldi	r22, 0x24	; 36
     8ca:	70 e0       	ldi	r23, 0x00	; 0
     8cc:	42 e0       	ldi	r20, 0x02	; 2
     8ce:	50 e0       	ldi	r21, 0x00	; 0
     8d0:	0e 94 65 01 	call	0x2ca	; 0x2ca <ax12GetRegister>
     8d4:	00 d0       	rcall	.+0      	; 0x8d6 <main+0x286>
     8d6:	00 d0       	rcall	.+0      	; 0x8d8 <main+0x288>
     8d8:	00 d0       	rcall	.+0      	; 0x8da <main+0x28a>
     8da:	ed b7       	in	r30, 0x3d	; 61
     8dc:	fe b7       	in	r31, 0x3e	; 62
     8de:	31 96       	adiw	r30, 0x01	; 1
     8e0:	ad b7       	in	r26, 0x3d	; 61
     8e2:	be b7       	in	r27, 0x3e	; 62
     8e4:	12 96       	adiw	r26, 0x02	; 2
     8e6:	1c 93       	st	X, r17
     8e8:	0e 93       	st	-X, r16
     8ea:	11 97       	sbiw	r26, 0x01	; 1
     8ec:	d3 82       	std	Z+3, r13	; 0x03
     8ee:	c2 82       	std	Z+2, r12	; 0x02
     8f0:	95 83       	std	Z+5, r25	; 0x05
     8f2:	84 83       	std	Z+4, r24	; 0x04
     8f4:	0e 94 38 05 	call	0xa70	; 0xa70 <fprintf>
				if (i<NUM_MOTORS-1) fprintf(stdout, ",");								//Print delimiter
     8f8:	ed b7       	in	r30, 0x3d	; 61
     8fa:	fe b7       	in	r31, 0x3e	; 62
     8fc:	36 96       	adiw	r30, 0x06	; 6
     8fe:	0f b6       	in	r0, 0x3f	; 63
     900:	f8 94       	cli
     902:	fe bf       	out	0x3e, r31	; 62
     904:	0f be       	out	0x3f, r0	; 63
     906:	ed bf       	out	0x3d, r30	; 61
     908:	20 97       	sbiw	r28, 0x00	; 0
     90a:	41 f4       	brne	.+16     	; 0x91c <main+0x2cc>
     90c:	60 91 e1 01 	lds	r22, 0x01E1
     910:	70 91 e2 01 	lds	r23, 0x01E2
     914:	8c e2       	ldi	r24, 0x2C	; 44
     916:	90 e0       	ldi	r25, 0x00	; 0
     918:	0e 94 4c 05 	call	0xa98	; 0xa98 <fputc>
			
			//Only after we have commanded all the positions, can we check the status
			fprintf(stdout, ".c");														//ACK Character
			
			//Send ACK Info
			for (int i = 0; i<NUM_MOTORS; i++)
     91c:	21 96       	adiw	r28, 0x01	; 1
     91e:	c2 30       	cpi	r28, 0x02	; 2
     920:	d1 05       	cpc	r29, r1
     922:	21 f6       	brne	.-120    	; 0x8ac <main+0x25c>
				while(ax12GetRegister(i,AX_MOVING,1));									//Wait for this motor to finish moving
				fprintf(stdout, "%d", ax12GetRegister(i, AX_PRESENT_POSITION_L, 2));	//Return the present position
				if (i<NUM_MOTORS-1) fprintf(stdout, ",");								//Print delimiter
			}				
			
			fprintf(stdout, "\n");														//ACK Newline
     924:	60 91 e1 01 	lds	r22, 0x01E1
     928:	70 91 e2 01 	lds	r23, 0x01E2
     92c:	8a e0       	ldi	r24, 0x0A	; 10
     92e:	90 e0       	ldi	r25, 0x00	; 0
     930:	0e 94 4c 05 	call	0xa98	; 0xa98 <fputc>
     934:	b4 ce       	rjmp	.-664    	; 0x69e <main+0x4e>

00000936 <uart_init>:
#include <util/setbaud.h>

/* http://www.cs.mun.ca/~rod/Winter2007/4723/notes/serial/serial.html */

void uart_init(void) {
	UBRR0H = UBRRH_VALUE;
     936:	10 92 c5 00 	sts	0x00C5, r1
	UBRR0L = UBRRL_VALUE;
     93a:	89 e1       	ldi	r24, 0x19	; 25
     93c:	80 93 c4 00 	sts	0x00C4, r24
	
	#if USE_2X
	UCSR0A |= _BV(U2X0);
	#else
	UCSR0A &= ~(_BV(U2X0));
     940:	e0 ec       	ldi	r30, 0xC0	; 192
     942:	f0 e0       	ldi	r31, 0x00	; 0
     944:	80 81       	ld	r24, Z
     946:	8d 7f       	andi	r24, 0xFD	; 253
     948:	80 83       	st	Z, r24
	#endif

	UCSR0C = _BV(UCSZ01) | _BV(UCSZ00); /* 8-bit data */
     94a:	86 e0       	ldi	r24, 0x06	; 6
     94c:	80 93 c2 00 	sts	0x00C2, r24
	UCSR0B = _BV(RXEN0) | _BV(TXEN0);   /* Enable RX and TX */
     950:	88 e1       	ldi	r24, 0x18	; 24
     952:	80 93 c1 00 	sts	0x00C1, r24
}
     956:	08 95       	ret

00000958 <uart_putchar>:

void uart_putchar(char c, FILE *stream) {
     958:	1f 93       	push	r17
     95a:	18 2f       	mov	r17, r24
	if (c == '\n') {
     95c:	8a 30       	cpi	r24, 0x0A	; 10
     95e:	19 f4       	brne	.+6      	; 0x966 <uart_putchar+0xe>
		uart_putchar('\r', stream);
     960:	8d e0       	ldi	r24, 0x0D	; 13
     962:	0e 94 ac 04 	call	0x958	; 0x958 <uart_putchar>
	}
	loop_until_bit_is_set(UCSR0A, UDRE0);
     966:	80 91 c0 00 	lds	r24, 0x00C0
     96a:	85 ff       	sbrs	r24, 5
     96c:	fc cf       	rjmp	.-8      	; 0x966 <uart_putchar+0xe>
	UDR0 = c;
     96e:	10 93 c6 00 	sts	0x00C6, r17
}
     972:	1f 91       	pop	r17
     974:	08 95       	ret

00000976 <uart_getchar>:

char uart_getchar(FILE *stream) {
	loop_until_bit_is_set(UCSR0A, RXC0);
     976:	80 91 c0 00 	lds	r24, 0x00C0
     97a:	87 ff       	sbrs	r24, 7
     97c:	fc cf       	rjmp	.-8      	; 0x976 <uart_getchar>
	return UDR0;
     97e:	80 91 c6 00 	lds	r24, 0x00C6
     982:	08 95       	ret

00000984 <__divmodhi4>:
     984:	97 fb       	bst	r25, 7
     986:	09 2e       	mov	r0, r25
     988:	07 26       	eor	r0, r23
     98a:	0a d0       	rcall	.+20     	; 0x9a0 <__divmodhi4_neg1>
     98c:	77 fd       	sbrc	r23, 7
     98e:	04 d0       	rcall	.+8      	; 0x998 <__divmodhi4_neg2>
     990:	2e d0       	rcall	.+92     	; 0x9ee <__udivmodhi4>
     992:	06 d0       	rcall	.+12     	; 0x9a0 <__divmodhi4_neg1>
     994:	00 20       	and	r0, r0
     996:	1a f4       	brpl	.+6      	; 0x99e <__divmodhi4_exit>

00000998 <__divmodhi4_neg2>:
     998:	70 95       	com	r23
     99a:	61 95       	neg	r22
     99c:	7f 4f       	sbci	r23, 0xFF	; 255

0000099e <__divmodhi4_exit>:
     99e:	08 95       	ret

000009a0 <__divmodhi4_neg1>:
     9a0:	f6 f7       	brtc	.-4      	; 0x99e <__divmodhi4_exit>
     9a2:	90 95       	com	r25
     9a4:	81 95       	neg	r24
     9a6:	9f 4f       	sbci	r25, 0xFF	; 255
     9a8:	08 95       	ret

000009aa <__udivmodsi4>:
     9aa:	a1 e2       	ldi	r26, 0x21	; 33
     9ac:	1a 2e       	mov	r1, r26
     9ae:	aa 1b       	sub	r26, r26
     9b0:	bb 1b       	sub	r27, r27
     9b2:	fd 01       	movw	r30, r26
     9b4:	0d c0       	rjmp	.+26     	; 0x9d0 <__udivmodsi4_ep>

000009b6 <__udivmodsi4_loop>:
     9b6:	aa 1f       	adc	r26, r26
     9b8:	bb 1f       	adc	r27, r27
     9ba:	ee 1f       	adc	r30, r30
     9bc:	ff 1f       	adc	r31, r31
     9be:	a2 17       	cp	r26, r18
     9c0:	b3 07       	cpc	r27, r19
     9c2:	e4 07       	cpc	r30, r20
     9c4:	f5 07       	cpc	r31, r21
     9c6:	20 f0       	brcs	.+8      	; 0x9d0 <__udivmodsi4_ep>
     9c8:	a2 1b       	sub	r26, r18
     9ca:	b3 0b       	sbc	r27, r19
     9cc:	e4 0b       	sbc	r30, r20
     9ce:	f5 0b       	sbc	r31, r21

000009d0 <__udivmodsi4_ep>:
     9d0:	66 1f       	adc	r22, r22
     9d2:	77 1f       	adc	r23, r23
     9d4:	88 1f       	adc	r24, r24
     9d6:	99 1f       	adc	r25, r25
     9d8:	1a 94       	dec	r1
     9da:	69 f7       	brne	.-38     	; 0x9b6 <__udivmodsi4_loop>
     9dc:	60 95       	com	r22
     9de:	70 95       	com	r23
     9e0:	80 95       	com	r24
     9e2:	90 95       	com	r25
     9e4:	9b 01       	movw	r18, r22
     9e6:	ac 01       	movw	r20, r24
     9e8:	bd 01       	movw	r22, r26
     9ea:	cf 01       	movw	r24, r30
     9ec:	08 95       	ret

000009ee <__udivmodhi4>:
     9ee:	aa 1b       	sub	r26, r26
     9f0:	bb 1b       	sub	r27, r27
     9f2:	51 e1       	ldi	r21, 0x11	; 17
     9f4:	07 c0       	rjmp	.+14     	; 0xa04 <__udivmodhi4_ep>

000009f6 <__udivmodhi4_loop>:
     9f6:	aa 1f       	adc	r26, r26
     9f8:	bb 1f       	adc	r27, r27
     9fa:	a6 17       	cp	r26, r22
     9fc:	b7 07       	cpc	r27, r23
     9fe:	10 f0       	brcs	.+4      	; 0xa04 <__udivmodhi4_ep>
     a00:	a6 1b       	sub	r26, r22
     a02:	b7 0b       	sbc	r27, r23

00000a04 <__udivmodhi4_ep>:
     a04:	88 1f       	adc	r24, r24
     a06:	99 1f       	adc	r25, r25
     a08:	5a 95       	dec	r21
     a0a:	a9 f7       	brne	.-22     	; 0x9f6 <__udivmodhi4_loop>
     a0c:	80 95       	com	r24
     a0e:	90 95       	com	r25
     a10:	bc 01       	movw	r22, r24
     a12:	cd 01       	movw	r24, r26
     a14:	08 95       	ret

00000a16 <fgets>:
     a16:	a0 e0       	ldi	r26, 0x00	; 0
     a18:	b0 e0       	ldi	r27, 0x00	; 0
     a1a:	e1 e1       	ldi	r30, 0x11	; 17
     a1c:	f5 e0       	ldi	r31, 0x05	; 5
     a1e:	0c 94 3e 08 	jmp	0x107c	; 0x107c <__prologue_saves__+0x14>
     a22:	7c 01       	movw	r14, r24
     a24:	6a 01       	movw	r12, r20
     a26:	fa 01       	movw	r30, r20
     a28:	83 81       	ldd	r24, Z+3	; 0x03
     a2a:	80 ff       	sbrs	r24, 0
     a2c:	19 c0       	rjmp	.+50     	; 0xa60 <fgets+0x4a>
     a2e:	16 16       	cp	r1, r22
     a30:	17 06       	cpc	r1, r23
     a32:	b4 f4       	brge	.+44     	; 0xa60 <fgets+0x4a>
     a34:	eb 01       	movw	r28, r22
     a36:	21 97       	sbiw	r28, 0x01	; 1
     a38:	87 01       	movw	r16, r14
     a3a:	0d c0       	rjmp	.+26     	; 0xa56 <fgets+0x40>
     a3c:	c6 01       	movw	r24, r12
     a3e:	0e 94 94 07 	call	0xf28	; 0xf28 <fgetc>
     a42:	ff ef       	ldi	r31, 0xFF	; 255
     a44:	8f 3f       	cpi	r24, 0xFF	; 255
     a46:	9f 07       	cpc	r25, r31
     a48:	59 f0       	breq	.+22     	; 0xa60 <fgets+0x4a>
     a4a:	f8 01       	movw	r30, r16
     a4c:	81 93       	st	Z+, r24
     a4e:	8f 01       	movw	r16, r30
     a50:	0a 97       	sbiw	r24, 0x0a	; 10
     a52:	19 f0       	breq	.+6      	; 0xa5a <fgets+0x44>
     a54:	21 97       	sbiw	r28, 0x01	; 1
     a56:	20 97       	sbiw	r28, 0x00	; 0
     a58:	89 f7       	brne	.-30     	; 0xa3c <fgets+0x26>
     a5a:	f8 01       	movw	r30, r16
     a5c:	10 82       	st	Z, r1
     a5e:	02 c0       	rjmp	.+4      	; 0xa64 <fgets+0x4e>
     a60:	ee 24       	eor	r14, r14
     a62:	ff 24       	eor	r15, r15
     a64:	c7 01       	movw	r24, r14
     a66:	cd b7       	in	r28, 0x3d	; 61
     a68:	de b7       	in	r29, 0x3e	; 62
     a6a:	e8 e0       	ldi	r30, 0x08	; 8
     a6c:	0c 94 5a 08 	jmp	0x10b4	; 0x10b4 <__epilogue_restores__+0x14>

00000a70 <fprintf>:
     a70:	a0 e0       	ldi	r26, 0x00	; 0
     a72:	b0 e0       	ldi	r27, 0x00	; 0
     a74:	ee e3       	ldi	r30, 0x3E	; 62
     a76:	f5 e0       	ldi	r31, 0x05	; 5
     a78:	0c 94 44 08 	jmp	0x1088	; 0x1088 <__prologue_saves__+0x20>
     a7c:	9e 01       	movw	r18, r28
     a7e:	27 5f       	subi	r18, 0xF7	; 247
     a80:	3f 4f       	sbci	r19, 0xFF	; 255
     a82:	8d 81       	ldd	r24, Y+5	; 0x05
     a84:	9e 81       	ldd	r25, Y+6	; 0x06
     a86:	6f 81       	ldd	r22, Y+7	; 0x07
     a88:	78 85       	ldd	r23, Y+8	; 0x08
     a8a:	a9 01       	movw	r20, r18
     a8c:	0e 94 a1 05 	call	0xb42	; 0xb42 <vfprintf>
     a90:	20 96       	adiw	r28, 0x00	; 0
     a92:	e2 e0       	ldi	r30, 0x02	; 2
     a94:	0c 94 60 08 	jmp	0x10c0	; 0x10c0 <__epilogue_restores__+0x20>

00000a98 <fputc>:
     a98:	0f 93       	push	r16
     a9a:	1f 93       	push	r17
     a9c:	cf 93       	push	r28
     a9e:	df 93       	push	r29
     aa0:	8c 01       	movw	r16, r24
     aa2:	eb 01       	movw	r28, r22
     aa4:	8b 81       	ldd	r24, Y+3	; 0x03
     aa6:	81 ff       	sbrs	r24, 1
     aa8:	1b c0       	rjmp	.+54     	; 0xae0 <fputc+0x48>
     aaa:	82 ff       	sbrs	r24, 2
     aac:	0d c0       	rjmp	.+26     	; 0xac8 <fputc+0x30>
     aae:	2e 81       	ldd	r18, Y+6	; 0x06
     ab0:	3f 81       	ldd	r19, Y+7	; 0x07
     ab2:	8c 81       	ldd	r24, Y+4	; 0x04
     ab4:	9d 81       	ldd	r25, Y+5	; 0x05
     ab6:	28 17       	cp	r18, r24
     ab8:	39 07       	cpc	r19, r25
     aba:	64 f4       	brge	.+24     	; 0xad4 <fputc+0x3c>
     abc:	e8 81       	ld	r30, Y
     abe:	f9 81       	ldd	r31, Y+1	; 0x01
     ac0:	01 93       	st	Z+, r16
     ac2:	f9 83       	std	Y+1, r31	; 0x01
     ac4:	e8 83       	st	Y, r30
     ac6:	06 c0       	rjmp	.+12     	; 0xad4 <fputc+0x3c>
     ac8:	e8 85       	ldd	r30, Y+8	; 0x08
     aca:	f9 85       	ldd	r31, Y+9	; 0x09
     acc:	80 2f       	mov	r24, r16
     ace:	09 95       	icall
     ad0:	89 2b       	or	r24, r25
     ad2:	31 f4       	brne	.+12     	; 0xae0 <fputc+0x48>
     ad4:	8e 81       	ldd	r24, Y+6	; 0x06
     ad6:	9f 81       	ldd	r25, Y+7	; 0x07
     ad8:	01 96       	adiw	r24, 0x01	; 1
     ada:	9f 83       	std	Y+7, r25	; 0x07
     adc:	8e 83       	std	Y+6, r24	; 0x06
     ade:	02 c0       	rjmp	.+4      	; 0xae4 <fputc+0x4c>
     ae0:	0f ef       	ldi	r16, 0xFF	; 255
     ae2:	1f ef       	ldi	r17, 0xFF	; 255
     ae4:	c8 01       	movw	r24, r16
     ae6:	df 91       	pop	r29
     ae8:	cf 91       	pop	r28
     aea:	1f 91       	pop	r17
     aec:	0f 91       	pop	r16
     aee:	08 95       	ret

00000af0 <fputs>:
     af0:	ef 92       	push	r14
     af2:	ff 92       	push	r15
     af4:	0f 93       	push	r16
     af6:	1f 93       	push	r17
     af8:	cf 93       	push	r28
     afa:	df 93       	push	r29
     afc:	7c 01       	movw	r14, r24
     afe:	8b 01       	movw	r16, r22
     b00:	db 01       	movw	r26, r22
     b02:	13 96       	adiw	r26, 0x03	; 3
     b04:	8c 91       	ld	r24, X
     b06:	81 fd       	sbrc	r24, 1
     b08:	03 c0       	rjmp	.+6      	; 0xb10 <fputs+0x20>
     b0a:	cf ef       	ldi	r28, 0xFF	; 255
     b0c:	df ef       	ldi	r29, 0xFF	; 255
     b0e:	13 c0       	rjmp	.+38     	; 0xb36 <fputs+0x46>
     b10:	c0 e0       	ldi	r28, 0x00	; 0
     b12:	d0 e0       	ldi	r29, 0x00	; 0
     b14:	0b c0       	rjmp	.+22     	; 0xb2c <fputs+0x3c>
     b16:	d8 01       	movw	r26, r16
     b18:	18 96       	adiw	r26, 0x08	; 8
     b1a:	ed 91       	ld	r30, X+
     b1c:	fc 91       	ld	r31, X
     b1e:	19 97       	sbiw	r26, 0x09	; 9
     b20:	b8 01       	movw	r22, r16
     b22:	09 95       	icall
     b24:	89 2b       	or	r24, r25
     b26:	11 f0       	breq	.+4      	; 0xb2c <fputs+0x3c>
     b28:	cf ef       	ldi	r28, 0xFF	; 255
     b2a:	df ef       	ldi	r29, 0xFF	; 255
     b2c:	f7 01       	movw	r30, r14
     b2e:	81 91       	ld	r24, Z+
     b30:	7f 01       	movw	r14, r30
     b32:	88 23       	and	r24, r24
     b34:	81 f7       	brne	.-32     	; 0xb16 <fputs+0x26>
     b36:	ce 01       	movw	r24, r28
     b38:	cd b7       	in	r28, 0x3d	; 61
     b3a:	de b7       	in	r29, 0x3e	; 62
     b3c:	e6 e0       	ldi	r30, 0x06	; 6
     b3e:	0c 94 5c 08 	jmp	0x10b8	; 0x10b8 <__epilogue_restores__+0x18>

00000b42 <vfprintf>:
     b42:	ab e0       	ldi	r26, 0x0B	; 11
     b44:	b0 e0       	ldi	r27, 0x00	; 0
     b46:	e7 ea       	ldi	r30, 0xA7	; 167
     b48:	f5 e0       	ldi	r31, 0x05	; 5
     b4a:	0c 94 34 08 	jmp	0x1068	; 0x1068 <__prologue_saves__>
     b4e:	3c 01       	movw	r6, r24
     b50:	2b 01       	movw	r4, r22
     b52:	5a 01       	movw	r10, r20
     b54:	fc 01       	movw	r30, r24
     b56:	17 82       	std	Z+7, r1	; 0x07
     b58:	16 82       	std	Z+6, r1	; 0x06
     b5a:	83 81       	ldd	r24, Z+3	; 0x03
     b5c:	81 fd       	sbrc	r24, 1
     b5e:	03 c0       	rjmp	.+6      	; 0xb66 <vfprintf+0x24>
     b60:	6f ef       	ldi	r22, 0xFF	; 255
     b62:	7f ef       	ldi	r23, 0xFF	; 255
     b64:	c6 c1       	rjmp	.+908    	; 0xef2 <vfprintf+0x3b0>
     b66:	9a e0       	ldi	r25, 0x0A	; 10
     b68:	89 2e       	mov	r8, r25
     b6a:	1e 01       	movw	r2, r28
     b6c:	08 94       	sec
     b6e:	21 1c       	adc	r2, r1
     b70:	31 1c       	adc	r3, r1
     b72:	f3 01       	movw	r30, r6
     b74:	23 81       	ldd	r18, Z+3	; 0x03
     b76:	f2 01       	movw	r30, r4
     b78:	23 fd       	sbrc	r18, 3
     b7a:	85 91       	lpm	r24, Z+
     b7c:	23 ff       	sbrs	r18, 3
     b7e:	81 91       	ld	r24, Z+
     b80:	2f 01       	movw	r4, r30
     b82:	88 23       	and	r24, r24
     b84:	09 f4       	brne	.+2      	; 0xb88 <vfprintf+0x46>
     b86:	b2 c1       	rjmp	.+868    	; 0xeec <vfprintf+0x3aa>
     b88:	85 32       	cpi	r24, 0x25	; 37
     b8a:	39 f4       	brne	.+14     	; 0xb9a <vfprintf+0x58>
     b8c:	23 fd       	sbrc	r18, 3
     b8e:	85 91       	lpm	r24, Z+
     b90:	23 ff       	sbrs	r18, 3
     b92:	81 91       	ld	r24, Z+
     b94:	2f 01       	movw	r4, r30
     b96:	85 32       	cpi	r24, 0x25	; 37
     b98:	29 f4       	brne	.+10     	; 0xba4 <vfprintf+0x62>
     b9a:	90 e0       	ldi	r25, 0x00	; 0
     b9c:	b3 01       	movw	r22, r6
     b9e:	0e 94 4c 05 	call	0xa98	; 0xa98 <fputc>
     ba2:	e7 cf       	rjmp	.-50     	; 0xb72 <vfprintf+0x30>
     ba4:	98 2f       	mov	r25, r24
     ba6:	ff 24       	eor	r15, r15
     ba8:	ee 24       	eor	r14, r14
     baa:	99 24       	eor	r9, r9
     bac:	ff e1       	ldi	r31, 0x1F	; 31
     bae:	ff 15       	cp	r31, r15
     bb0:	d0 f0       	brcs	.+52     	; 0xbe6 <vfprintf+0xa4>
     bb2:	9b 32       	cpi	r25, 0x2B	; 43
     bb4:	69 f0       	breq	.+26     	; 0xbd0 <vfprintf+0x8e>
     bb6:	9c 32       	cpi	r25, 0x2C	; 44
     bb8:	28 f4       	brcc	.+10     	; 0xbc4 <vfprintf+0x82>
     bba:	90 32       	cpi	r25, 0x20	; 32
     bbc:	59 f0       	breq	.+22     	; 0xbd4 <vfprintf+0x92>
     bbe:	93 32       	cpi	r25, 0x23	; 35
     bc0:	91 f4       	brne	.+36     	; 0xbe6 <vfprintf+0xa4>
     bc2:	0e c0       	rjmp	.+28     	; 0xbe0 <vfprintf+0x9e>
     bc4:	9d 32       	cpi	r25, 0x2D	; 45
     bc6:	49 f0       	breq	.+18     	; 0xbda <vfprintf+0x98>
     bc8:	90 33       	cpi	r25, 0x30	; 48
     bca:	69 f4       	brne	.+26     	; 0xbe6 <vfprintf+0xa4>
     bcc:	41 e0       	ldi	r20, 0x01	; 1
     bce:	24 c0       	rjmp	.+72     	; 0xc18 <vfprintf+0xd6>
     bd0:	52 e0       	ldi	r21, 0x02	; 2
     bd2:	f5 2a       	or	r15, r21
     bd4:	84 e0       	ldi	r24, 0x04	; 4
     bd6:	f8 2a       	or	r15, r24
     bd8:	28 c0       	rjmp	.+80     	; 0xc2a <vfprintf+0xe8>
     bda:	98 e0       	ldi	r25, 0x08	; 8
     bdc:	f9 2a       	or	r15, r25
     bde:	25 c0       	rjmp	.+74     	; 0xc2a <vfprintf+0xe8>
     be0:	e0 e1       	ldi	r30, 0x10	; 16
     be2:	fe 2a       	or	r15, r30
     be4:	22 c0       	rjmp	.+68     	; 0xc2a <vfprintf+0xe8>
     be6:	f7 fc       	sbrc	r15, 7
     be8:	29 c0       	rjmp	.+82     	; 0xc3c <vfprintf+0xfa>
     bea:	89 2f       	mov	r24, r25
     bec:	80 53       	subi	r24, 0x30	; 48
     bee:	8a 30       	cpi	r24, 0x0A	; 10
     bf0:	70 f4       	brcc	.+28     	; 0xc0e <vfprintf+0xcc>
     bf2:	f6 fe       	sbrs	r15, 6
     bf4:	05 c0       	rjmp	.+10     	; 0xc00 <vfprintf+0xbe>
     bf6:	98 9c       	mul	r9, r8
     bf8:	90 2c       	mov	r9, r0
     bfa:	11 24       	eor	r1, r1
     bfc:	98 0e       	add	r9, r24
     bfe:	15 c0       	rjmp	.+42     	; 0xc2a <vfprintf+0xe8>
     c00:	e8 9c       	mul	r14, r8
     c02:	e0 2c       	mov	r14, r0
     c04:	11 24       	eor	r1, r1
     c06:	e8 0e       	add	r14, r24
     c08:	f0 e2       	ldi	r31, 0x20	; 32
     c0a:	ff 2a       	or	r15, r31
     c0c:	0e c0       	rjmp	.+28     	; 0xc2a <vfprintf+0xe8>
     c0e:	9e 32       	cpi	r25, 0x2E	; 46
     c10:	29 f4       	brne	.+10     	; 0xc1c <vfprintf+0xda>
     c12:	f6 fc       	sbrc	r15, 6
     c14:	6b c1       	rjmp	.+726    	; 0xeec <vfprintf+0x3aa>
     c16:	40 e4       	ldi	r20, 0x40	; 64
     c18:	f4 2a       	or	r15, r20
     c1a:	07 c0       	rjmp	.+14     	; 0xc2a <vfprintf+0xe8>
     c1c:	9c 36       	cpi	r25, 0x6C	; 108
     c1e:	19 f4       	brne	.+6      	; 0xc26 <vfprintf+0xe4>
     c20:	50 e8       	ldi	r21, 0x80	; 128
     c22:	f5 2a       	or	r15, r21
     c24:	02 c0       	rjmp	.+4      	; 0xc2a <vfprintf+0xe8>
     c26:	98 36       	cpi	r25, 0x68	; 104
     c28:	49 f4       	brne	.+18     	; 0xc3c <vfprintf+0xfa>
     c2a:	f2 01       	movw	r30, r4
     c2c:	23 fd       	sbrc	r18, 3
     c2e:	95 91       	lpm	r25, Z+
     c30:	23 ff       	sbrs	r18, 3
     c32:	91 91       	ld	r25, Z+
     c34:	2f 01       	movw	r4, r30
     c36:	99 23       	and	r25, r25
     c38:	09 f0       	breq	.+2      	; 0xc3c <vfprintf+0xfa>
     c3a:	b8 cf       	rjmp	.-144    	; 0xbac <vfprintf+0x6a>
     c3c:	89 2f       	mov	r24, r25
     c3e:	85 54       	subi	r24, 0x45	; 69
     c40:	83 30       	cpi	r24, 0x03	; 3
     c42:	18 f0       	brcs	.+6      	; 0xc4a <vfprintf+0x108>
     c44:	80 52       	subi	r24, 0x20	; 32
     c46:	83 30       	cpi	r24, 0x03	; 3
     c48:	38 f4       	brcc	.+14     	; 0xc58 <vfprintf+0x116>
     c4a:	44 e0       	ldi	r20, 0x04	; 4
     c4c:	50 e0       	ldi	r21, 0x00	; 0
     c4e:	a4 0e       	add	r10, r20
     c50:	b5 1e       	adc	r11, r21
     c52:	5f e3       	ldi	r21, 0x3F	; 63
     c54:	59 83       	std	Y+1, r21	; 0x01
     c56:	0f c0       	rjmp	.+30     	; 0xc76 <vfprintf+0x134>
     c58:	93 36       	cpi	r25, 0x63	; 99
     c5a:	31 f0       	breq	.+12     	; 0xc68 <vfprintf+0x126>
     c5c:	93 37       	cpi	r25, 0x73	; 115
     c5e:	79 f0       	breq	.+30     	; 0xc7e <vfprintf+0x13c>
     c60:	93 35       	cpi	r25, 0x53	; 83
     c62:	09 f0       	breq	.+2      	; 0xc66 <vfprintf+0x124>
     c64:	56 c0       	rjmp	.+172    	; 0xd12 <vfprintf+0x1d0>
     c66:	20 c0       	rjmp	.+64     	; 0xca8 <vfprintf+0x166>
     c68:	f5 01       	movw	r30, r10
     c6a:	80 81       	ld	r24, Z
     c6c:	89 83       	std	Y+1, r24	; 0x01
     c6e:	42 e0       	ldi	r20, 0x02	; 2
     c70:	50 e0       	ldi	r21, 0x00	; 0
     c72:	a4 0e       	add	r10, r20
     c74:	b5 1e       	adc	r11, r21
     c76:	61 01       	movw	r12, r2
     c78:	01 e0       	ldi	r16, 0x01	; 1
     c7a:	10 e0       	ldi	r17, 0x00	; 0
     c7c:	12 c0       	rjmp	.+36     	; 0xca2 <vfprintf+0x160>
     c7e:	f5 01       	movw	r30, r10
     c80:	c0 80       	ld	r12, Z
     c82:	d1 80       	ldd	r13, Z+1	; 0x01
     c84:	f6 fc       	sbrc	r15, 6
     c86:	03 c0       	rjmp	.+6      	; 0xc8e <vfprintf+0x14c>
     c88:	6f ef       	ldi	r22, 0xFF	; 255
     c8a:	7f ef       	ldi	r23, 0xFF	; 255
     c8c:	02 c0       	rjmp	.+4      	; 0xc92 <vfprintf+0x150>
     c8e:	69 2d       	mov	r22, r9
     c90:	70 e0       	ldi	r23, 0x00	; 0
     c92:	42 e0       	ldi	r20, 0x02	; 2
     c94:	50 e0       	ldi	r21, 0x00	; 0
     c96:	a4 0e       	add	r10, r20
     c98:	b5 1e       	adc	r11, r21
     c9a:	c6 01       	movw	r24, r12
     c9c:	0e 94 89 07 	call	0xf12	; 0xf12 <strnlen>
     ca0:	8c 01       	movw	r16, r24
     ca2:	5f e7       	ldi	r21, 0x7F	; 127
     ca4:	f5 22       	and	r15, r21
     ca6:	14 c0       	rjmp	.+40     	; 0xcd0 <vfprintf+0x18e>
     ca8:	f5 01       	movw	r30, r10
     caa:	c0 80       	ld	r12, Z
     cac:	d1 80       	ldd	r13, Z+1	; 0x01
     cae:	f6 fc       	sbrc	r15, 6
     cb0:	03 c0       	rjmp	.+6      	; 0xcb8 <vfprintf+0x176>
     cb2:	6f ef       	ldi	r22, 0xFF	; 255
     cb4:	7f ef       	ldi	r23, 0xFF	; 255
     cb6:	02 c0       	rjmp	.+4      	; 0xcbc <vfprintf+0x17a>
     cb8:	69 2d       	mov	r22, r9
     cba:	70 e0       	ldi	r23, 0x00	; 0
     cbc:	42 e0       	ldi	r20, 0x02	; 2
     cbe:	50 e0       	ldi	r21, 0x00	; 0
     cc0:	a4 0e       	add	r10, r20
     cc2:	b5 1e       	adc	r11, r21
     cc4:	c6 01       	movw	r24, r12
     cc6:	0e 94 7e 07 	call	0xefc	; 0xefc <strnlen_P>
     cca:	8c 01       	movw	r16, r24
     ccc:	50 e8       	ldi	r21, 0x80	; 128
     cce:	f5 2a       	or	r15, r21
     cd0:	f3 fe       	sbrs	r15, 3
     cd2:	07 c0       	rjmp	.+14     	; 0xce2 <vfprintf+0x1a0>
     cd4:	1a c0       	rjmp	.+52     	; 0xd0a <vfprintf+0x1c8>
     cd6:	80 e2       	ldi	r24, 0x20	; 32
     cd8:	90 e0       	ldi	r25, 0x00	; 0
     cda:	b3 01       	movw	r22, r6
     cdc:	0e 94 4c 05 	call	0xa98	; 0xa98 <fputc>
     ce0:	ea 94       	dec	r14
     ce2:	8e 2d       	mov	r24, r14
     ce4:	90 e0       	ldi	r25, 0x00	; 0
     ce6:	08 17       	cp	r16, r24
     ce8:	19 07       	cpc	r17, r25
     cea:	a8 f3       	brcs	.-22     	; 0xcd6 <vfprintf+0x194>
     cec:	0e c0       	rjmp	.+28     	; 0xd0a <vfprintf+0x1c8>
     cee:	f6 01       	movw	r30, r12
     cf0:	f7 fc       	sbrc	r15, 7
     cf2:	85 91       	lpm	r24, Z+
     cf4:	f7 fe       	sbrs	r15, 7
     cf6:	81 91       	ld	r24, Z+
     cf8:	6f 01       	movw	r12, r30
     cfa:	90 e0       	ldi	r25, 0x00	; 0
     cfc:	b3 01       	movw	r22, r6
     cfe:	0e 94 4c 05 	call	0xa98	; 0xa98 <fputc>
     d02:	e1 10       	cpse	r14, r1
     d04:	ea 94       	dec	r14
     d06:	01 50       	subi	r16, 0x01	; 1
     d08:	10 40       	sbci	r17, 0x00	; 0
     d0a:	01 15       	cp	r16, r1
     d0c:	11 05       	cpc	r17, r1
     d0e:	79 f7       	brne	.-34     	; 0xcee <vfprintf+0x1ac>
     d10:	ea c0       	rjmp	.+468    	; 0xee6 <vfprintf+0x3a4>
     d12:	94 36       	cpi	r25, 0x64	; 100
     d14:	11 f0       	breq	.+4      	; 0xd1a <vfprintf+0x1d8>
     d16:	99 36       	cpi	r25, 0x69	; 105
     d18:	69 f5       	brne	.+90     	; 0xd74 <vfprintf+0x232>
     d1a:	f7 fe       	sbrs	r15, 7
     d1c:	08 c0       	rjmp	.+16     	; 0xd2e <vfprintf+0x1ec>
     d1e:	f5 01       	movw	r30, r10
     d20:	20 81       	ld	r18, Z
     d22:	31 81       	ldd	r19, Z+1	; 0x01
     d24:	42 81       	ldd	r20, Z+2	; 0x02
     d26:	53 81       	ldd	r21, Z+3	; 0x03
     d28:	84 e0       	ldi	r24, 0x04	; 4
     d2a:	90 e0       	ldi	r25, 0x00	; 0
     d2c:	0a c0       	rjmp	.+20     	; 0xd42 <vfprintf+0x200>
     d2e:	f5 01       	movw	r30, r10
     d30:	80 81       	ld	r24, Z
     d32:	91 81       	ldd	r25, Z+1	; 0x01
     d34:	9c 01       	movw	r18, r24
     d36:	44 27       	eor	r20, r20
     d38:	37 fd       	sbrc	r19, 7
     d3a:	40 95       	com	r20
     d3c:	54 2f       	mov	r21, r20
     d3e:	82 e0       	ldi	r24, 0x02	; 2
     d40:	90 e0       	ldi	r25, 0x00	; 0
     d42:	a8 0e       	add	r10, r24
     d44:	b9 1e       	adc	r11, r25
     d46:	9f e6       	ldi	r25, 0x6F	; 111
     d48:	f9 22       	and	r15, r25
     d4a:	57 ff       	sbrs	r21, 7
     d4c:	09 c0       	rjmp	.+18     	; 0xd60 <vfprintf+0x21e>
     d4e:	50 95       	com	r21
     d50:	40 95       	com	r20
     d52:	30 95       	com	r19
     d54:	21 95       	neg	r18
     d56:	3f 4f       	sbci	r19, 0xFF	; 255
     d58:	4f 4f       	sbci	r20, 0xFF	; 255
     d5a:	5f 4f       	sbci	r21, 0xFF	; 255
     d5c:	e0 e8       	ldi	r30, 0x80	; 128
     d5e:	fe 2a       	or	r15, r30
     d60:	ca 01       	movw	r24, r20
     d62:	b9 01       	movw	r22, r18
     d64:	a1 01       	movw	r20, r2
     d66:	2a e0       	ldi	r18, 0x0A	; 10
     d68:	30 e0       	ldi	r19, 0x00	; 0
     d6a:	0e 94 d6 07 	call	0xfac	; 0xfac <__ultoa_invert>
     d6e:	d8 2e       	mov	r13, r24
     d70:	d2 18       	sub	r13, r2
     d72:	40 c0       	rjmp	.+128    	; 0xdf4 <vfprintf+0x2b2>
     d74:	95 37       	cpi	r25, 0x75	; 117
     d76:	29 f4       	brne	.+10     	; 0xd82 <vfprintf+0x240>
     d78:	1f 2d       	mov	r17, r15
     d7a:	1f 7e       	andi	r17, 0xEF	; 239
     d7c:	2a e0       	ldi	r18, 0x0A	; 10
     d7e:	30 e0       	ldi	r19, 0x00	; 0
     d80:	1d c0       	rjmp	.+58     	; 0xdbc <vfprintf+0x27a>
     d82:	1f 2d       	mov	r17, r15
     d84:	19 7f       	andi	r17, 0xF9	; 249
     d86:	9f 36       	cpi	r25, 0x6F	; 111
     d88:	61 f0       	breq	.+24     	; 0xda2 <vfprintf+0x260>
     d8a:	90 37       	cpi	r25, 0x70	; 112
     d8c:	20 f4       	brcc	.+8      	; 0xd96 <vfprintf+0x254>
     d8e:	98 35       	cpi	r25, 0x58	; 88
     d90:	09 f0       	breq	.+2      	; 0xd94 <vfprintf+0x252>
     d92:	ac c0       	rjmp	.+344    	; 0xeec <vfprintf+0x3aa>
     d94:	0f c0       	rjmp	.+30     	; 0xdb4 <vfprintf+0x272>
     d96:	90 37       	cpi	r25, 0x70	; 112
     d98:	39 f0       	breq	.+14     	; 0xda8 <vfprintf+0x266>
     d9a:	98 37       	cpi	r25, 0x78	; 120
     d9c:	09 f0       	breq	.+2      	; 0xda0 <vfprintf+0x25e>
     d9e:	a6 c0       	rjmp	.+332    	; 0xeec <vfprintf+0x3aa>
     da0:	04 c0       	rjmp	.+8      	; 0xdaa <vfprintf+0x268>
     da2:	28 e0       	ldi	r18, 0x08	; 8
     da4:	30 e0       	ldi	r19, 0x00	; 0
     da6:	0a c0       	rjmp	.+20     	; 0xdbc <vfprintf+0x27a>
     da8:	10 61       	ori	r17, 0x10	; 16
     daa:	14 fd       	sbrc	r17, 4
     dac:	14 60       	ori	r17, 0x04	; 4
     dae:	20 e1       	ldi	r18, 0x10	; 16
     db0:	30 e0       	ldi	r19, 0x00	; 0
     db2:	04 c0       	rjmp	.+8      	; 0xdbc <vfprintf+0x27a>
     db4:	14 fd       	sbrc	r17, 4
     db6:	16 60       	ori	r17, 0x06	; 6
     db8:	20 e1       	ldi	r18, 0x10	; 16
     dba:	32 e0       	ldi	r19, 0x02	; 2
     dbc:	17 ff       	sbrs	r17, 7
     dbe:	08 c0       	rjmp	.+16     	; 0xdd0 <vfprintf+0x28e>
     dc0:	f5 01       	movw	r30, r10
     dc2:	60 81       	ld	r22, Z
     dc4:	71 81       	ldd	r23, Z+1	; 0x01
     dc6:	82 81       	ldd	r24, Z+2	; 0x02
     dc8:	93 81       	ldd	r25, Z+3	; 0x03
     dca:	44 e0       	ldi	r20, 0x04	; 4
     dcc:	50 e0       	ldi	r21, 0x00	; 0
     dce:	08 c0       	rjmp	.+16     	; 0xde0 <vfprintf+0x29e>
     dd0:	f5 01       	movw	r30, r10
     dd2:	80 81       	ld	r24, Z
     dd4:	91 81       	ldd	r25, Z+1	; 0x01
     dd6:	bc 01       	movw	r22, r24
     dd8:	80 e0       	ldi	r24, 0x00	; 0
     dda:	90 e0       	ldi	r25, 0x00	; 0
     ddc:	42 e0       	ldi	r20, 0x02	; 2
     dde:	50 e0       	ldi	r21, 0x00	; 0
     de0:	a4 0e       	add	r10, r20
     de2:	b5 1e       	adc	r11, r21
     de4:	a1 01       	movw	r20, r2
     de6:	0e 94 d6 07 	call	0xfac	; 0xfac <__ultoa_invert>
     dea:	d8 2e       	mov	r13, r24
     dec:	d2 18       	sub	r13, r2
     dee:	8f e7       	ldi	r24, 0x7F	; 127
     df0:	f8 2e       	mov	r15, r24
     df2:	f1 22       	and	r15, r17
     df4:	f6 fe       	sbrs	r15, 6
     df6:	0b c0       	rjmp	.+22     	; 0xe0e <vfprintf+0x2cc>
     df8:	5e ef       	ldi	r21, 0xFE	; 254
     dfa:	f5 22       	and	r15, r21
     dfc:	d9 14       	cp	r13, r9
     dfe:	38 f4       	brcc	.+14     	; 0xe0e <vfprintf+0x2cc>
     e00:	f4 fe       	sbrs	r15, 4
     e02:	07 c0       	rjmp	.+14     	; 0xe12 <vfprintf+0x2d0>
     e04:	f2 fc       	sbrc	r15, 2
     e06:	05 c0       	rjmp	.+10     	; 0xe12 <vfprintf+0x2d0>
     e08:	8f ee       	ldi	r24, 0xEF	; 239
     e0a:	f8 22       	and	r15, r24
     e0c:	02 c0       	rjmp	.+4      	; 0xe12 <vfprintf+0x2d0>
     e0e:	1d 2d       	mov	r17, r13
     e10:	01 c0       	rjmp	.+2      	; 0xe14 <vfprintf+0x2d2>
     e12:	19 2d       	mov	r17, r9
     e14:	f4 fe       	sbrs	r15, 4
     e16:	0d c0       	rjmp	.+26     	; 0xe32 <vfprintf+0x2f0>
     e18:	fe 01       	movw	r30, r28
     e1a:	ed 0d       	add	r30, r13
     e1c:	f1 1d       	adc	r31, r1
     e1e:	80 81       	ld	r24, Z
     e20:	80 33       	cpi	r24, 0x30	; 48
     e22:	19 f4       	brne	.+6      	; 0xe2a <vfprintf+0x2e8>
     e24:	99 ee       	ldi	r25, 0xE9	; 233
     e26:	f9 22       	and	r15, r25
     e28:	08 c0       	rjmp	.+16     	; 0xe3a <vfprintf+0x2f8>
     e2a:	1f 5f       	subi	r17, 0xFF	; 255
     e2c:	f2 fe       	sbrs	r15, 2
     e2e:	05 c0       	rjmp	.+10     	; 0xe3a <vfprintf+0x2f8>
     e30:	03 c0       	rjmp	.+6      	; 0xe38 <vfprintf+0x2f6>
     e32:	8f 2d       	mov	r24, r15
     e34:	86 78       	andi	r24, 0x86	; 134
     e36:	09 f0       	breq	.+2      	; 0xe3a <vfprintf+0x2f8>
     e38:	1f 5f       	subi	r17, 0xFF	; 255
     e3a:	0f 2d       	mov	r16, r15
     e3c:	f3 fc       	sbrc	r15, 3
     e3e:	14 c0       	rjmp	.+40     	; 0xe68 <vfprintf+0x326>
     e40:	f0 fe       	sbrs	r15, 0
     e42:	0f c0       	rjmp	.+30     	; 0xe62 <vfprintf+0x320>
     e44:	1e 15       	cp	r17, r14
     e46:	10 f0       	brcs	.+4      	; 0xe4c <vfprintf+0x30a>
     e48:	9d 2c       	mov	r9, r13
     e4a:	0b c0       	rjmp	.+22     	; 0xe62 <vfprintf+0x320>
     e4c:	9d 2c       	mov	r9, r13
     e4e:	9e 0c       	add	r9, r14
     e50:	91 1a       	sub	r9, r17
     e52:	1e 2d       	mov	r17, r14
     e54:	06 c0       	rjmp	.+12     	; 0xe62 <vfprintf+0x320>
     e56:	80 e2       	ldi	r24, 0x20	; 32
     e58:	90 e0       	ldi	r25, 0x00	; 0
     e5a:	b3 01       	movw	r22, r6
     e5c:	0e 94 4c 05 	call	0xa98	; 0xa98 <fputc>
     e60:	1f 5f       	subi	r17, 0xFF	; 255
     e62:	1e 15       	cp	r17, r14
     e64:	c0 f3       	brcs	.-16     	; 0xe56 <vfprintf+0x314>
     e66:	04 c0       	rjmp	.+8      	; 0xe70 <vfprintf+0x32e>
     e68:	1e 15       	cp	r17, r14
     e6a:	10 f4       	brcc	.+4      	; 0xe70 <vfprintf+0x32e>
     e6c:	e1 1a       	sub	r14, r17
     e6e:	01 c0       	rjmp	.+2      	; 0xe72 <vfprintf+0x330>
     e70:	ee 24       	eor	r14, r14
     e72:	04 ff       	sbrs	r16, 4
     e74:	0f c0       	rjmp	.+30     	; 0xe94 <vfprintf+0x352>
     e76:	80 e3       	ldi	r24, 0x30	; 48
     e78:	90 e0       	ldi	r25, 0x00	; 0
     e7a:	b3 01       	movw	r22, r6
     e7c:	0e 94 4c 05 	call	0xa98	; 0xa98 <fputc>
     e80:	02 ff       	sbrs	r16, 2
     e82:	1d c0       	rjmp	.+58     	; 0xebe <vfprintf+0x37c>
     e84:	01 fd       	sbrc	r16, 1
     e86:	03 c0       	rjmp	.+6      	; 0xe8e <vfprintf+0x34c>
     e88:	88 e7       	ldi	r24, 0x78	; 120
     e8a:	90 e0       	ldi	r25, 0x00	; 0
     e8c:	0e c0       	rjmp	.+28     	; 0xeaa <vfprintf+0x368>
     e8e:	88 e5       	ldi	r24, 0x58	; 88
     e90:	90 e0       	ldi	r25, 0x00	; 0
     e92:	0b c0       	rjmp	.+22     	; 0xeaa <vfprintf+0x368>
     e94:	80 2f       	mov	r24, r16
     e96:	86 78       	andi	r24, 0x86	; 134
     e98:	91 f0       	breq	.+36     	; 0xebe <vfprintf+0x37c>
     e9a:	01 ff       	sbrs	r16, 1
     e9c:	02 c0       	rjmp	.+4      	; 0xea2 <vfprintf+0x360>
     e9e:	8b e2       	ldi	r24, 0x2B	; 43
     ea0:	01 c0       	rjmp	.+2      	; 0xea4 <vfprintf+0x362>
     ea2:	80 e2       	ldi	r24, 0x20	; 32
     ea4:	f7 fc       	sbrc	r15, 7
     ea6:	8d e2       	ldi	r24, 0x2D	; 45
     ea8:	90 e0       	ldi	r25, 0x00	; 0
     eaa:	b3 01       	movw	r22, r6
     eac:	0e 94 4c 05 	call	0xa98	; 0xa98 <fputc>
     eb0:	06 c0       	rjmp	.+12     	; 0xebe <vfprintf+0x37c>
     eb2:	80 e3       	ldi	r24, 0x30	; 48
     eb4:	90 e0       	ldi	r25, 0x00	; 0
     eb6:	b3 01       	movw	r22, r6
     eb8:	0e 94 4c 05 	call	0xa98	; 0xa98 <fputc>
     ebc:	9a 94       	dec	r9
     ebe:	d9 14       	cp	r13, r9
     ec0:	c0 f3       	brcs	.-16     	; 0xeb2 <vfprintf+0x370>
     ec2:	da 94       	dec	r13
     ec4:	f1 01       	movw	r30, r2
     ec6:	ed 0d       	add	r30, r13
     ec8:	f1 1d       	adc	r31, r1
     eca:	80 81       	ld	r24, Z
     ecc:	90 e0       	ldi	r25, 0x00	; 0
     ece:	b3 01       	movw	r22, r6
     ed0:	0e 94 4c 05 	call	0xa98	; 0xa98 <fputc>
     ed4:	dd 20       	and	r13, r13
     ed6:	a9 f7       	brne	.-22     	; 0xec2 <vfprintf+0x380>
     ed8:	06 c0       	rjmp	.+12     	; 0xee6 <vfprintf+0x3a4>
     eda:	80 e2       	ldi	r24, 0x20	; 32
     edc:	90 e0       	ldi	r25, 0x00	; 0
     ede:	b3 01       	movw	r22, r6
     ee0:	0e 94 4c 05 	call	0xa98	; 0xa98 <fputc>
     ee4:	ea 94       	dec	r14
     ee6:	ee 20       	and	r14, r14
     ee8:	c1 f7       	brne	.-16     	; 0xeda <vfprintf+0x398>
     eea:	43 ce       	rjmp	.-890    	; 0xb72 <vfprintf+0x30>
     eec:	f3 01       	movw	r30, r6
     eee:	66 81       	ldd	r22, Z+6	; 0x06
     ef0:	77 81       	ldd	r23, Z+7	; 0x07
     ef2:	cb 01       	movw	r24, r22
     ef4:	2b 96       	adiw	r28, 0x0b	; 11
     ef6:	e2 e1       	ldi	r30, 0x12	; 18
     ef8:	0c 94 50 08 	jmp	0x10a0	; 0x10a0 <__epilogue_restores__>

00000efc <strnlen_P>:
     efc:	fc 01       	movw	r30, r24
     efe:	05 90       	lpm	r0, Z+
     f00:	61 50       	subi	r22, 0x01	; 1
     f02:	70 40       	sbci	r23, 0x00	; 0
     f04:	01 10       	cpse	r0, r1
     f06:	d8 f7       	brcc	.-10     	; 0xefe <strnlen_P+0x2>
     f08:	80 95       	com	r24
     f0a:	90 95       	com	r25
     f0c:	8e 0f       	add	r24, r30
     f0e:	9f 1f       	adc	r25, r31
     f10:	08 95       	ret

00000f12 <strnlen>:
     f12:	fc 01       	movw	r30, r24
     f14:	61 50       	subi	r22, 0x01	; 1
     f16:	70 40       	sbci	r23, 0x00	; 0
     f18:	01 90       	ld	r0, Z+
     f1a:	01 10       	cpse	r0, r1
     f1c:	d8 f7       	brcc	.-10     	; 0xf14 <strnlen+0x2>
     f1e:	80 95       	com	r24
     f20:	90 95       	com	r25
     f22:	8e 0f       	add	r24, r30
     f24:	9f 1f       	adc	r25, r31
     f26:	08 95       	ret

00000f28 <fgetc>:
     f28:	cf 93       	push	r28
     f2a:	df 93       	push	r29
     f2c:	ec 01       	movw	r28, r24
     f2e:	4b 81       	ldd	r20, Y+3	; 0x03
     f30:	40 ff       	sbrs	r20, 0
     f32:	1a c0       	rjmp	.+52     	; 0xf68 <fgetc+0x40>
     f34:	46 ff       	sbrs	r20, 6
     f36:	0a c0       	rjmp	.+20     	; 0xf4c <fgetc+0x24>
     f38:	4f 7b       	andi	r20, 0xBF	; 191
     f3a:	4b 83       	std	Y+3, r20	; 0x03
     f3c:	8e 81       	ldd	r24, Y+6	; 0x06
     f3e:	9f 81       	ldd	r25, Y+7	; 0x07
     f40:	01 96       	adiw	r24, 0x01	; 1
     f42:	9f 83       	std	Y+7, r25	; 0x07
     f44:	8e 83       	std	Y+6, r24	; 0x06
     f46:	8a 81       	ldd	r24, Y+2	; 0x02
     f48:	28 2f       	mov	r18, r24
     f4a:	2b c0       	rjmp	.+86     	; 0xfa2 <fgetc+0x7a>
     f4c:	42 ff       	sbrs	r20, 2
     f4e:	13 c0       	rjmp	.+38     	; 0xf76 <fgetc+0x4e>
     f50:	e8 81       	ld	r30, Y
     f52:	f9 81       	ldd	r31, Y+1	; 0x01
     f54:	80 81       	ld	r24, Z
     f56:	28 2f       	mov	r18, r24
     f58:	33 27       	eor	r19, r19
     f5a:	27 fd       	sbrc	r18, 7
     f5c:	30 95       	com	r19
     f5e:	21 15       	cp	r18, r1
     f60:	31 05       	cpc	r19, r1
     f62:	29 f4       	brne	.+10     	; 0xf6e <fgetc+0x46>
     f64:	40 62       	ori	r20, 0x20	; 32
     f66:	4b 83       	std	Y+3, r20	; 0x03
     f68:	2f ef       	ldi	r18, 0xFF	; 255
     f6a:	3f ef       	ldi	r19, 0xFF	; 255
     f6c:	1b c0       	rjmp	.+54     	; 0xfa4 <fgetc+0x7c>
     f6e:	31 96       	adiw	r30, 0x01	; 1
     f70:	f9 83       	std	Y+1, r31	; 0x01
     f72:	e8 83       	st	Y, r30
     f74:	11 c0       	rjmp	.+34     	; 0xf98 <fgetc+0x70>
     f76:	ea 85       	ldd	r30, Y+10	; 0x0a
     f78:	fb 85       	ldd	r31, Y+11	; 0x0b
     f7a:	ce 01       	movw	r24, r28
     f7c:	09 95       	icall
     f7e:	9c 01       	movw	r18, r24
     f80:	97 ff       	sbrs	r25, 7
     f82:	0a c0       	rjmp	.+20     	; 0xf98 <fgetc+0x70>
     f84:	9b 81       	ldd	r25, Y+3	; 0x03
     f86:	2f 5f       	subi	r18, 0xFF	; 255
     f88:	3f 4f       	sbci	r19, 0xFF	; 255
     f8a:	11 f0       	breq	.+4      	; 0xf90 <fgetc+0x68>
     f8c:	80 e2       	ldi	r24, 0x20	; 32
     f8e:	01 c0       	rjmp	.+2      	; 0xf92 <fgetc+0x6a>
     f90:	80 e1       	ldi	r24, 0x10	; 16
     f92:	89 2b       	or	r24, r25
     f94:	8b 83       	std	Y+3, r24	; 0x03
     f96:	e8 cf       	rjmp	.-48     	; 0xf68 <fgetc+0x40>
     f98:	8e 81       	ldd	r24, Y+6	; 0x06
     f9a:	9f 81       	ldd	r25, Y+7	; 0x07
     f9c:	01 96       	adiw	r24, 0x01	; 1
     f9e:	9f 83       	std	Y+7, r25	; 0x07
     fa0:	8e 83       	std	Y+6, r24	; 0x06
     fa2:	30 e0       	ldi	r19, 0x00	; 0
     fa4:	c9 01       	movw	r24, r18
     fa6:	df 91       	pop	r29
     fa8:	cf 91       	pop	r28
     faa:	08 95       	ret

00000fac <__ultoa_invert>:
     fac:	fa 01       	movw	r30, r20
     fae:	aa 27       	eor	r26, r26
     fb0:	28 30       	cpi	r18, 0x08	; 8
     fb2:	51 f1       	breq	.+84     	; 0x1008 <__ultoa_invert+0x5c>
     fb4:	20 31       	cpi	r18, 0x10	; 16
     fb6:	81 f1       	breq	.+96     	; 0x1018 <__ultoa_invert+0x6c>
     fb8:	e8 94       	clt
     fba:	6f 93       	push	r22
     fbc:	6e 7f       	andi	r22, 0xFE	; 254
     fbe:	6e 5f       	subi	r22, 0xFE	; 254
     fc0:	7f 4f       	sbci	r23, 0xFF	; 255
     fc2:	8f 4f       	sbci	r24, 0xFF	; 255
     fc4:	9f 4f       	sbci	r25, 0xFF	; 255
     fc6:	af 4f       	sbci	r26, 0xFF	; 255
     fc8:	b1 e0       	ldi	r27, 0x01	; 1
     fca:	3e d0       	rcall	.+124    	; 0x1048 <__ultoa_invert+0x9c>
     fcc:	b4 e0       	ldi	r27, 0x04	; 4
     fce:	3c d0       	rcall	.+120    	; 0x1048 <__ultoa_invert+0x9c>
     fd0:	67 0f       	add	r22, r23
     fd2:	78 1f       	adc	r23, r24
     fd4:	89 1f       	adc	r24, r25
     fd6:	9a 1f       	adc	r25, r26
     fd8:	a1 1d       	adc	r26, r1
     fda:	68 0f       	add	r22, r24
     fdc:	79 1f       	adc	r23, r25
     fde:	8a 1f       	adc	r24, r26
     fe0:	91 1d       	adc	r25, r1
     fe2:	a1 1d       	adc	r26, r1
     fe4:	6a 0f       	add	r22, r26
     fe6:	71 1d       	adc	r23, r1
     fe8:	81 1d       	adc	r24, r1
     fea:	91 1d       	adc	r25, r1
     fec:	a1 1d       	adc	r26, r1
     fee:	20 d0       	rcall	.+64     	; 0x1030 <__ultoa_invert+0x84>
     ff0:	09 f4       	brne	.+2      	; 0xff4 <__ultoa_invert+0x48>
     ff2:	68 94       	set
     ff4:	3f 91       	pop	r19
     ff6:	2a e0       	ldi	r18, 0x0A	; 10
     ff8:	26 9f       	mul	r18, r22
     ffa:	11 24       	eor	r1, r1
     ffc:	30 19       	sub	r19, r0
     ffe:	30 5d       	subi	r19, 0xD0	; 208
    1000:	31 93       	st	Z+, r19
    1002:	de f6       	brtc	.-74     	; 0xfba <__ultoa_invert+0xe>
    1004:	cf 01       	movw	r24, r30
    1006:	08 95       	ret
    1008:	46 2f       	mov	r20, r22
    100a:	47 70       	andi	r20, 0x07	; 7
    100c:	40 5d       	subi	r20, 0xD0	; 208
    100e:	41 93       	st	Z+, r20
    1010:	b3 e0       	ldi	r27, 0x03	; 3
    1012:	0f d0       	rcall	.+30     	; 0x1032 <__ultoa_invert+0x86>
    1014:	c9 f7       	brne	.-14     	; 0x1008 <__ultoa_invert+0x5c>
    1016:	f6 cf       	rjmp	.-20     	; 0x1004 <__ultoa_invert+0x58>
    1018:	46 2f       	mov	r20, r22
    101a:	4f 70       	andi	r20, 0x0F	; 15
    101c:	40 5d       	subi	r20, 0xD0	; 208
    101e:	4a 33       	cpi	r20, 0x3A	; 58
    1020:	18 f0       	brcs	.+6      	; 0x1028 <__ultoa_invert+0x7c>
    1022:	49 5d       	subi	r20, 0xD9	; 217
    1024:	31 fd       	sbrc	r19, 1
    1026:	40 52       	subi	r20, 0x20	; 32
    1028:	41 93       	st	Z+, r20
    102a:	02 d0       	rcall	.+4      	; 0x1030 <__ultoa_invert+0x84>
    102c:	a9 f7       	brne	.-22     	; 0x1018 <__ultoa_invert+0x6c>
    102e:	ea cf       	rjmp	.-44     	; 0x1004 <__ultoa_invert+0x58>
    1030:	b4 e0       	ldi	r27, 0x04	; 4
    1032:	a6 95       	lsr	r26
    1034:	97 95       	ror	r25
    1036:	87 95       	ror	r24
    1038:	77 95       	ror	r23
    103a:	67 95       	ror	r22
    103c:	ba 95       	dec	r27
    103e:	c9 f7       	brne	.-14     	; 0x1032 <__ultoa_invert+0x86>
    1040:	00 97       	sbiw	r24, 0x00	; 0
    1042:	61 05       	cpc	r22, r1
    1044:	71 05       	cpc	r23, r1
    1046:	08 95       	ret
    1048:	9b 01       	movw	r18, r22
    104a:	ac 01       	movw	r20, r24
    104c:	0a 2e       	mov	r0, r26
    104e:	06 94       	lsr	r0
    1050:	57 95       	ror	r21
    1052:	47 95       	ror	r20
    1054:	37 95       	ror	r19
    1056:	27 95       	ror	r18
    1058:	ba 95       	dec	r27
    105a:	c9 f7       	brne	.-14     	; 0x104e <__ultoa_invert+0xa2>
    105c:	62 0f       	add	r22, r18
    105e:	73 1f       	adc	r23, r19
    1060:	84 1f       	adc	r24, r20
    1062:	95 1f       	adc	r25, r21
    1064:	a0 1d       	adc	r26, r0
    1066:	08 95       	ret

00001068 <__prologue_saves__>:
    1068:	2f 92       	push	r2
    106a:	3f 92       	push	r3
    106c:	4f 92       	push	r4
    106e:	5f 92       	push	r5
    1070:	6f 92       	push	r6
    1072:	7f 92       	push	r7
    1074:	8f 92       	push	r8
    1076:	9f 92       	push	r9
    1078:	af 92       	push	r10
    107a:	bf 92       	push	r11
    107c:	cf 92       	push	r12
    107e:	df 92       	push	r13
    1080:	ef 92       	push	r14
    1082:	ff 92       	push	r15
    1084:	0f 93       	push	r16
    1086:	1f 93       	push	r17
    1088:	cf 93       	push	r28
    108a:	df 93       	push	r29
    108c:	cd b7       	in	r28, 0x3d	; 61
    108e:	de b7       	in	r29, 0x3e	; 62
    1090:	ca 1b       	sub	r28, r26
    1092:	db 0b       	sbc	r29, r27
    1094:	0f b6       	in	r0, 0x3f	; 63
    1096:	f8 94       	cli
    1098:	de bf       	out	0x3e, r29	; 62
    109a:	0f be       	out	0x3f, r0	; 63
    109c:	cd bf       	out	0x3d, r28	; 61
    109e:	09 94       	ijmp

000010a0 <__epilogue_restores__>:
    10a0:	2a 88       	ldd	r2, Y+18	; 0x12
    10a2:	39 88       	ldd	r3, Y+17	; 0x11
    10a4:	48 88       	ldd	r4, Y+16	; 0x10
    10a6:	5f 84       	ldd	r5, Y+15	; 0x0f
    10a8:	6e 84       	ldd	r6, Y+14	; 0x0e
    10aa:	7d 84       	ldd	r7, Y+13	; 0x0d
    10ac:	8c 84       	ldd	r8, Y+12	; 0x0c
    10ae:	9b 84       	ldd	r9, Y+11	; 0x0b
    10b0:	aa 84       	ldd	r10, Y+10	; 0x0a
    10b2:	b9 84       	ldd	r11, Y+9	; 0x09
    10b4:	c8 84       	ldd	r12, Y+8	; 0x08
    10b6:	df 80       	ldd	r13, Y+7	; 0x07
    10b8:	ee 80       	ldd	r14, Y+6	; 0x06
    10ba:	fd 80       	ldd	r15, Y+5	; 0x05
    10bc:	0c 81       	ldd	r16, Y+4	; 0x04
    10be:	1b 81       	ldd	r17, Y+3	; 0x03
    10c0:	aa 81       	ldd	r26, Y+2	; 0x02
    10c2:	b9 81       	ldd	r27, Y+1	; 0x01
    10c4:	ce 0f       	add	r28, r30
    10c6:	d1 1d       	adc	r29, r1
    10c8:	0f b6       	in	r0, 0x3f	; 63
    10ca:	f8 94       	cli
    10cc:	de bf       	out	0x3e, r29	; 62
    10ce:	0f be       	out	0x3f, r0	; 63
    10d0:	cd bf       	out	0x3d, r28	; 61
    10d2:	ed 01       	movw	r28, r26
    10d4:	08 95       	ret

000010d6 <_exit>:
    10d6:	f8 94       	cli

000010d8 <__stop_program>:
    10d8:	ff cf       	rjmp	.-2      	; 0x10d8 <__stop_program>
